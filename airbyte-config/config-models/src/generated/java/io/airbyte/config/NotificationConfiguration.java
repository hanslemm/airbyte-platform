/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

/**
 * Notification
 * <p>
 * Notification Configuration
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "notificationType",
  "enabled"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class NotificationConfiguration implements Serializable {

  /**
   * NotificationConfigurationType
   * <p>
   * Type of configured notification (Required)
   *
   */
  @JsonProperty("notificationType")
  @JsonPropertyDescription("Type of configured notification")
  private NotificationConfigurationType notificationType;
  @JsonProperty("enabled")
  private Boolean enabled = false;
  @JsonIgnore
  private Map<String, Object> additionalProperties = new HashMap<String, Object>();
  private final static long serialVersionUID = -4734156373259712355L;

  /**
   * NotificationConfigurationType
   * <p>
   * Type of configured notification (Required)
   *
   */
  @JsonProperty("notificationType")
  public NotificationConfigurationType getNotificationType() {
    return notificationType;
  }

  /**
   * NotificationConfigurationType
   * <p>
   * Type of configured notification (Required)
   *
   */
  @JsonProperty("notificationType")
  public void setNotificationType(NotificationConfigurationType notificationType) {
    this.notificationType = notificationType;
  }

  public NotificationConfiguration withNotificationType(NotificationConfigurationType notificationType) {
    this.notificationType = notificationType;
    return this;
  }

  @JsonProperty("enabled")
  public Boolean getEnabled() {
    return enabled;
  }

  @JsonProperty("enabled")
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public NotificationConfiguration withEnabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public NotificationConfiguration withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(NotificationConfiguration.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("notificationType");
    sb.append('=');
    sb.append(((this.notificationType == null) ? "<null>" : this.notificationType));
    sb.append(',');
    sb.append("enabled");
    sb.append('=');
    sb.append(((this.enabled == null) ? "<null>" : this.enabled));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(((this.additionalProperties == null) ? "<null>" : this.additionalProperties));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.enabled == null) ? 0 : this.enabled.hashCode()));
    result = ((result * 31) + ((this.notificationType == null) ? 0 : this.notificationType.hashCode()));
    result = ((result * 31) + ((this.additionalProperties == null) ? 0 : this.additionalProperties.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof NotificationConfiguration) == false) {
      return false;
    }
    NotificationConfiguration rhs = ((NotificationConfiguration) other);
    return ((((this.enabled == rhs.enabled) || ((this.enabled != null) && this.enabled.equals(rhs.enabled)))
        && ((this.notificationType == rhs.notificationType)
            || ((this.notificationType != null) && this.notificationType.equals(rhs.notificationType))))
        && ((this.additionalProperties == rhs.additionalProperties)
            || ((this.additionalProperties != null) && this.additionalProperties.equals(rhs.additionalProperties))));
  }

  /**
   * NotificationConfigurationType
   * <p>
   * Type of configured notification
   *
   */
  public enum NotificationConfigurationType {

    SLACK("slack"),
    EMAIL("email");

    private final String value;
    private final static Map<String, NotificationConfigurationType> CONSTANTS = new HashMap<String, NotificationConfigurationType>();

    static {
      for (NotificationConfigurationType c : values()) {
        CONSTANTS.put(c.value, c);
      }
    }

    private NotificationConfigurationType(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return this.value;
    }

    @JsonValue
    public String value() {
      return this.value;
    }

    @JsonCreator
    public static NotificationConfigurationType fromValue(String value) {
      NotificationConfigurationType constant = CONSTANTS.get(value);
      if (constant == null) {
        throw new IllegalArgumentException(value);
      } else {
        return constant;
      }
    }

  }

}
