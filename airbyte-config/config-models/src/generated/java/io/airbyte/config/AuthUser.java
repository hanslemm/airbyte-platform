/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.UUID;

/**
 * AuthUser
 * <p>
 * Airbyte auth user configuration
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "userId",
  "authUserId",
  "authProvider"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class AuthUser implements Serializable {

  /**
   * Airbyte user that the auth user is associated with (Required)
   *
   */
  @JsonProperty("userId")
  @JsonPropertyDescription("Airbyte user that the auth user is associated with")
  private UUID userId;
  /**
   * The unique id from the auth provider (Required)
   *
   */
  @JsonProperty("authUserId")
  @JsonPropertyDescription("The unique id from the auth provider")
  private String authUserId;
  /**
   * AuthProvider
   * <p>
   * enum that describes the different types of auth providers that the platform supports. (Required)
   *
   */
  @JsonProperty("authProvider")
  @JsonPropertyDescription("enum that describes the different types of auth providers that the platform supports.")
  private AuthProvider authProvider = AuthProvider.fromValue("airbyte");
  private final static long serialVersionUID = -1644605017702511042L;

  /**
   * Airbyte user that the auth user is associated with (Required)
   *
   */
  @JsonProperty("userId")
  public UUID getUserId() {
    return userId;
  }

  /**
   * Airbyte user that the auth user is associated with (Required)
   *
   */
  @JsonProperty("userId")
  public void setUserId(UUID userId) {
    this.userId = userId;
  }

  public AuthUser withUserId(UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The unique id from the auth provider (Required)
   *
   */
  @JsonProperty("authUserId")
  public String getAuthUserId() {
    return authUserId;
  }

  /**
   * The unique id from the auth provider (Required)
   *
   */
  @JsonProperty("authUserId")
  public void setAuthUserId(String authUserId) {
    this.authUserId = authUserId;
  }

  public AuthUser withAuthUserId(String authUserId) {
    this.authUserId = authUserId;
    return this;
  }

  /**
   * AuthProvider
   * <p>
   * enum that describes the different types of auth providers that the platform supports. (Required)
   *
   */
  @JsonProperty("authProvider")
  public AuthProvider getAuthProvider() {
    return authProvider;
  }

  /**
   * AuthProvider
   * <p>
   * enum that describes the different types of auth providers that the platform supports. (Required)
   *
   */
  @JsonProperty("authProvider")
  public void setAuthProvider(AuthProvider authProvider) {
    this.authProvider = authProvider;
  }

  public AuthUser withAuthProvider(AuthProvider authProvider) {
    this.authProvider = authProvider;
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(AuthUser.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("userId");
    sb.append('=');
    sb.append(((this.userId == null) ? "<null>" : this.userId));
    sb.append(',');
    sb.append("authUserId");
    sb.append('=');
    sb.append(((this.authUserId == null) ? "<null>" : this.authUserId));
    sb.append(',');
    sb.append("authProvider");
    sb.append('=');
    sb.append(((this.authProvider == null) ? "<null>" : this.authProvider));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.userId == null) ? 0 : this.userId.hashCode()));
    result = ((result * 31) + ((this.authUserId == null) ? 0 : this.authUserId.hashCode()));
    result = ((result * 31) + ((this.authProvider == null) ? 0 : this.authProvider.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof AuthUser) == false) {
      return false;
    }
    AuthUser rhs = ((AuthUser) other);
    return ((((this.userId == rhs.userId) || ((this.userId != null) && this.userId.equals(rhs.userId)))
        && ((this.authUserId == rhs.authUserId) || ((this.authUserId != null) && this.authUserId.equals(rhs.authUserId))))
        && ((this.authProvider == rhs.authProvider) || ((this.authProvider != null) && this.authProvider.equals(rhs.authProvider))));
  }

}
