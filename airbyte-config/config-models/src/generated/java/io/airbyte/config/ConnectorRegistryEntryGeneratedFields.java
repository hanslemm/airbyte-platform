/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

/**
 * ConnectorRegistryEntryGeneratedFields
 * <p>
 * Optional schema for fields generated as metadata is processed
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "git",
  "source_file_info",
  "metrics"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class ConnectorRegistryEntryGeneratedFields implements Serializable {

  @JsonProperty("git")
  private Git git;
  @JsonProperty("source_file_info")
  private SourceFileInfo sourceFileInfo;
  /**
   * ConnectorRegistryEntryMetrics
   * <p>
   * Public metrics for a given Connector from the registry (unstable)
   *
   */
  @JsonProperty("metrics")
  @JsonPropertyDescription("Public metrics for a given Connector from the registry (unstable)")
  private ConnectorRegistryEntryMetrics metrics;
  @JsonIgnore
  private Map<String, Object> additionalProperties = new HashMap<String, Object>();
  private final static long serialVersionUID = 3802349591336353628L;

  @JsonProperty("git")
  public Git getGit() {
    return git;
  }

  @JsonProperty("git")
  public void setGit(Git git) {
    this.git = git;
  }

  public ConnectorRegistryEntryGeneratedFields withGit(Git git) {
    this.git = git;
    return this;
  }

  @JsonProperty("source_file_info")
  public SourceFileInfo getSourceFileInfo() {
    return sourceFileInfo;
  }

  @JsonProperty("source_file_info")
  public void setSourceFileInfo(SourceFileInfo sourceFileInfo) {
    this.sourceFileInfo = sourceFileInfo;
  }

  public ConnectorRegistryEntryGeneratedFields withSourceFileInfo(SourceFileInfo sourceFileInfo) {
    this.sourceFileInfo = sourceFileInfo;
    return this;
  }

  /**
   * ConnectorRegistryEntryMetrics
   * <p>
   * Public metrics for a given Connector from the registry (unstable)
   *
   */
  @JsonProperty("metrics")
  public ConnectorRegistryEntryMetrics getMetrics() {
    return metrics;
  }

  /**
   * ConnectorRegistryEntryMetrics
   * <p>
   * Public metrics for a given Connector from the registry (unstable)
   *
   */
  @JsonProperty("metrics")
  public void setMetrics(ConnectorRegistryEntryMetrics metrics) {
    this.metrics = metrics;
  }

  public ConnectorRegistryEntryGeneratedFields withMetrics(ConnectorRegistryEntryMetrics metrics) {
    this.metrics = metrics;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public ConnectorRegistryEntryGeneratedFields withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(ConnectorRegistryEntryGeneratedFields.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this)))
        .append('[');
    sb.append("git");
    sb.append('=');
    sb.append(((this.git == null) ? "<null>" : this.git));
    sb.append(',');
    sb.append("sourceFileInfo");
    sb.append('=');
    sb.append(((this.sourceFileInfo == null) ? "<null>" : this.sourceFileInfo));
    sb.append(',');
    sb.append("metrics");
    sb.append('=');
    sb.append(((this.metrics == null) ? "<null>" : this.metrics));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(((this.additionalProperties == null) ? "<null>" : this.additionalProperties));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.git == null) ? 0 : this.git.hashCode()));
    result = ((result * 31) + ((this.sourceFileInfo == null) ? 0 : this.sourceFileInfo.hashCode()));
    result = ((result * 31) + ((this.metrics == null) ? 0 : this.metrics.hashCode()));
    result = ((result * 31) + ((this.additionalProperties == null) ? 0 : this.additionalProperties.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof ConnectorRegistryEntryGeneratedFields) == false) {
      return false;
    }
    ConnectorRegistryEntryGeneratedFields rhs = ((ConnectorRegistryEntryGeneratedFields) other);
    return (((((this.git == rhs.git) || ((this.git != null) && this.git.equals(rhs.git)))
        && ((this.sourceFileInfo == rhs.sourceFileInfo) || ((this.sourceFileInfo != null) && this.sourceFileInfo.equals(rhs.sourceFileInfo))))
        && ((this.metrics == rhs.metrics) || ((this.metrics != null) && this.metrics.equals(rhs.metrics))))
        && ((this.additionalProperties == rhs.additionalProperties)
            || ((this.additionalProperties != null) && this.additionalProperties.equals(rhs.additionalProperties))));
  }

}
