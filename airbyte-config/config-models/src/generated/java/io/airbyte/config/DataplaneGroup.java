/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.UUID;

/**
 * DataplaneGroup
 * <p>
 * dataplane group entry
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "id",
  "organization_id",
  "name",
  "enabled",
  "created_at",
  "updated_at",
  "tombstone"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class DataplaneGroup implements Serializable {

  /**
   * Unique ID of the data plane group (Required)
   *
   */
  @JsonProperty("id")
  @JsonPropertyDescription("Unique ID of the data plane group")
  private UUID id;
  /**
   * Organization to which the data plane group is assigned (Required)
   *
   */
  @JsonProperty("organization_id")
  @JsonPropertyDescription("Organization to which the data plane group is assigned")
  private UUID organizationId;
  /**
   * Name of the dataplane group (Required)
   *
   */
  @JsonProperty("name")
  @JsonPropertyDescription("Name of the dataplane group")
  private String name;
  /**
   * Whether the dataplane group is enabled (Required)
   *
   */
  @JsonProperty("enabled")
  @JsonPropertyDescription("Whether the dataplane group is enabled")
  private Boolean enabled;
  /**
   *
   * (Required)
   *
   */
  @JsonProperty("created_at")
  private Long createdAt;
  /**
   *
   * (Required)
   *
   */
  @JsonProperty("updated_at")
  private Long updatedAt;
  /**
   * Whether the dataplane group is marked as deleted (Required)
   *
   */
  @JsonProperty("tombstone")
  @JsonPropertyDescription("Whether the dataplane group is marked as deleted")
  private Boolean tombstone;
  @JsonIgnore
  private final Map<String, Object> additionalProperties = new HashMap<String, Object>();
  private final static long serialVersionUID = -3023824376967775389L;

  /**
   * Unique ID of the data plane group (Required)
   *
   */
  @JsonProperty("id")
  public UUID getId() {
    return id;
  }

  /**
   * Unique ID of the data plane group (Required)
   *
   */
  @JsonProperty("id")
  public void setId(UUID id) {
    this.id = id;
  }

  public DataplaneGroup withId(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Organization to which the data plane group is assigned (Required)
   *
   */
  @JsonProperty("organization_id")
  public UUID getOrganizationId() {
    return organizationId;
  }

  /**
   * Organization to which the data plane group is assigned (Required)
   *
   */
  @JsonProperty("organization_id")
  public void setOrganizationId(UUID organizationId) {
    this.organizationId = organizationId;
  }

  public DataplaneGroup withOrganizationId(UUID organizationId) {
    this.organizationId = organizationId;
    return this;
  }

  /**
   * Name of the dataplane group (Required)
   *
   */
  @JsonProperty("name")
  public String getName() {
    return name;
  }

  /**
   * Name of the dataplane group (Required)
   *
   */
  @JsonProperty("name")
  public void setName(String name) {
    this.name = name;
  }

  public DataplaneGroup withName(String name) {
    this.name = name;
    return this;
  }

  /**
   * Whether the dataplane group is enabled (Required)
   *
   */
  @JsonProperty("enabled")
  public Boolean getEnabled() {
    return enabled;
  }

  /**
   * Whether the dataplane group is enabled (Required)
   *
   */
  @JsonProperty("enabled")
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public DataplaneGroup withEnabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("created_at")
  public Long getCreatedAt() {
    return createdAt;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("created_at")
  public void setCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
  }

  public DataplaneGroup withCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("updated_at")
  public Long getUpdatedAt() {
    return updatedAt;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("updated_at")
  public void setUpdatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
  }

  public DataplaneGroup withUpdatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Whether the dataplane group is marked as deleted (Required)
   *
   */
  @JsonProperty("tombstone")
  public Boolean getTombstone() {
    return tombstone;
  }

  /**
   * Whether the dataplane group is marked as deleted (Required)
   *
   */
  @JsonProperty("tombstone")
  public void setTombstone(Boolean tombstone) {
    this.tombstone = tombstone;
  }

  public DataplaneGroup withTombstone(Boolean tombstone) {
    this.tombstone = tombstone;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public DataplaneGroup withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(DataplaneGroup.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("id");
    sb.append('=');
    sb.append(((this.id == null) ? "<null>" : this.id));
    sb.append(',');
    sb.append("organizationId");
    sb.append('=');
    sb.append(((this.organizationId == null) ? "<null>" : this.organizationId));
    sb.append(',');
    sb.append("name");
    sb.append('=');
    sb.append(((this.name == null) ? "<null>" : this.name));
    sb.append(',');
    sb.append("enabled");
    sb.append('=');
    sb.append(((this.enabled == null) ? "<null>" : this.enabled));
    sb.append(',');
    sb.append("createdAt");
    sb.append('=');
    sb.append(((this.createdAt == null) ? "<null>" : this.createdAt));
    sb.append(',');
    sb.append("updatedAt");
    sb.append('=');
    sb.append(((this.updatedAt == null) ? "<null>" : this.updatedAt));
    sb.append(',');
    sb.append("tombstone");
    sb.append('=');
    sb.append(((this.tombstone == null) ? "<null>" : this.tombstone));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(((this.additionalProperties == null) ? "<null>" : this.additionalProperties));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.organizationId == null) ? 0 : this.organizationId.hashCode()));
    result = ((result * 31) + ((this.createdAt == null) ? 0 : this.createdAt.hashCode()));
    result = ((result * 31) + ((this.tombstone == null) ? 0 : this.tombstone.hashCode()));
    result = ((result * 31) + ((this.name == null) ? 0 : this.name.hashCode()));
    result = ((result * 31) + ((this.id == null) ? 0 : this.id.hashCode()));
    result = ((result * 31) + ((this.additionalProperties == null) ? 0 : this.additionalProperties.hashCode()));
    result = ((result * 31) + ((this.enabled == null) ? 0 : this.enabled.hashCode()));
    result = ((result * 31) + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof DataplaneGroup) == false) {
      return false;
    }
    DataplaneGroup rhs = ((DataplaneGroup) other);
    return (((((((((this.organizationId == rhs.organizationId) || ((this.organizationId != null) && this.organizationId.equals(rhs.organizationId)))
        && ((this.createdAt == rhs.createdAt) || ((this.createdAt != null) && this.createdAt.equals(rhs.createdAt))))
        && ((this.tombstone == rhs.tombstone) || ((this.tombstone != null) && this.tombstone.equals(rhs.tombstone))))
        && ((this.name == rhs.name) || ((this.name != null) && this.name.equals(rhs.name))))
        && ((this.id == rhs.id) || ((this.id != null) && this.id.equals(rhs.id))))
        && ((this.additionalProperties == rhs.additionalProperties)
            || ((this.additionalProperties != null) && this.additionalProperties.equals(rhs.additionalProperties))))
        && ((this.enabled == rhs.enabled) || ((this.enabled != null) && this.enabled.equals(rhs.enabled))))
        && (Objects.equals(this.updatedAt, rhs.updatedAt)));
  }

}
