/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

/**
 * AbInternal
 * <p>
 * object that describes Airbyte internal fields
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "sl",
  "isEnterprise"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class AbInternal implements Serializable {

  /**
   * The internal standards of support for a connector
   *
   */
  @JsonProperty("sl")
  @JsonPropertyDescription("The internal standards of support for a connector")
  private Long sl;
  /**
   * whether this connector is only available with an enterprise license
   *
   */
  @JsonProperty("isEnterprise")
  @JsonPropertyDescription("whether this connector is only available with an enterprise license")
  private Boolean isEnterprise = false;
  @JsonIgnore
  private Map<String, Object> additionalProperties = new HashMap<String, Object>();
  private final static long serialVersionUID = -6158493333592884382L;

  /**
   * The internal standards of support for a connector
   *
   */
  @JsonProperty("sl")
  public Long getSl() {
    return sl;
  }

  /**
   * The internal standards of support for a connector
   *
   */
  @JsonProperty("sl")
  public void setSl(Long sl) {
    this.sl = sl;
  }

  public AbInternal withSl(Long sl) {
    this.sl = sl;
    return this;
  }

  /**
   * whether this connector is only available with an enterprise license
   *
   */
  @JsonProperty("isEnterprise")
  public Boolean getIsEnterprise() {
    return isEnterprise;
  }

  /**
   * whether this connector is only available with an enterprise license
   *
   */
  @JsonProperty("isEnterprise")
  public void setIsEnterprise(Boolean isEnterprise) {
    this.isEnterprise = isEnterprise;
  }

  public AbInternal withIsEnterprise(Boolean isEnterprise) {
    this.isEnterprise = isEnterprise;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public AbInternal withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(AbInternal.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("sl");
    sb.append('=');
    sb.append(((this.sl == null) ? "<null>" : this.sl));
    sb.append(',');
    sb.append("isEnterprise");
    sb.append('=');
    sb.append(((this.isEnterprise == null) ? "<null>" : this.isEnterprise));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(((this.additionalProperties == null) ? "<null>" : this.additionalProperties));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.sl == null) ? 0 : this.sl.hashCode()));
    result = ((result * 31) + ((this.isEnterprise == null) ? 0 : this.isEnterprise.hashCode()));
    result = ((result * 31) + ((this.additionalProperties == null) ? 0 : this.additionalProperties.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof AbInternal) == false) {
      return false;
    }
    AbInternal rhs = ((AbInternal) other);
    return ((((this.sl == rhs.sl) || ((this.sl != null) && this.sl.equals(rhs.sl)))
        && ((this.isEnterprise == rhs.isEnterprise) || ((this.isEnterprise != null) && this.isEnterprise.equals(rhs.isEnterprise))))
        && ((this.additionalProperties == rhs.additionalProperties)
            || ((this.additionalProperties != null) && this.additionalProperties.equals(rhs.additionalProperties))));
  }

}
