/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * ConnectorRegistry
 * <p>
 * describes the collection of connectors retrieved from a registry
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "destinations",
  "sources"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class ConnectorRegistry implements Serializable {

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("destinations")
  private List<ConnectorRegistryDestinationDefinition> destinations = new ArrayList<ConnectorRegistryDestinationDefinition>();
  /**
   *
   * (Required)
   *
   */
  @JsonProperty("sources")
  private List<ConnectorRegistrySourceDefinition> sources = new ArrayList<ConnectorRegistrySourceDefinition>();
  @JsonIgnore
  private Map<String, Object> additionalProperties = new HashMap<String, Object>();
  private final static long serialVersionUID = 1343162240380834203L;

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("destinations")
  public List<ConnectorRegistryDestinationDefinition> getDestinations() {
    return destinations;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("destinations")
  public void setDestinations(List<ConnectorRegistryDestinationDefinition> destinations) {
    this.destinations = destinations;
  }

  public ConnectorRegistry withDestinations(List<ConnectorRegistryDestinationDefinition> destinations) {
    this.destinations = destinations;
    return this;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("sources")
  public List<ConnectorRegistrySourceDefinition> getSources() {
    return sources;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("sources")
  public void setSources(List<ConnectorRegistrySourceDefinition> sources) {
    this.sources = sources;
  }

  public ConnectorRegistry withSources(List<ConnectorRegistrySourceDefinition> sources) {
    this.sources = sources;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public ConnectorRegistry withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(ConnectorRegistry.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("destinations");
    sb.append('=');
    sb.append(((this.destinations == null) ? "<null>" : this.destinations));
    sb.append(',');
    sb.append("sources");
    sb.append('=');
    sb.append(((this.sources == null) ? "<null>" : this.sources));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(((this.additionalProperties == null) ? "<null>" : this.additionalProperties));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.sources == null) ? 0 : this.sources.hashCode()));
    result = ((result * 31) + ((this.destinations == null) ? 0 : this.destinations.hashCode()));
    result = ((result * 31) + ((this.additionalProperties == null) ? 0 : this.additionalProperties.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof ConnectorRegistry) == false) {
      return false;
    }
    ConnectorRegistry rhs = ((ConnectorRegistry) other);
    return ((((this.sources == rhs.sources) || ((this.sources != null) && this.sources.equals(rhs.sources)))
        && ((this.destinations == rhs.destinations) || ((this.destinations != null) && this.destinations.equals(rhs.destinations))))
        && ((this.additionalProperties == rhs.additionalProperties)
            || ((this.additionalProperties != null) && this.additionalProperties.equals(rhs.additionalProperties))));
  }

}
