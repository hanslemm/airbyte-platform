/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.JsonNode;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

/**
 * ActorCatalog
 * <p>
 * Catalog of an actor.
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "id",
  "catalog",
  "catalogHash",
  "catalogType"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class ActorCatalog implements Serializable {

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("id")
  private UUID id;
  /**
   *
   * (Required)
   *
   */
  @JsonProperty("catalog")
  private JsonNode catalog;
  /**
   *
   * (Required)
   *
   */
  @JsonProperty("catalogHash")
  private String catalogHash;
  @JsonProperty("catalogType")
  private CatalogType catalogType;
  @JsonIgnore
  private Map<String, Object> additionalProperties = new HashMap<String, Object>();
  private final static long serialVersionUID = -9074137543891599163L;

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("id")
  public UUID getId() {
    return id;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("id")
  public void setId(UUID id) {
    this.id = id;
  }

  public ActorCatalog withId(UUID id) {
    this.id = id;
    return this;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("catalog")
  public JsonNode getCatalog() {
    return catalog;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("catalog")
  public void setCatalog(JsonNode catalog) {
    this.catalog = catalog;
  }

  public ActorCatalog withCatalog(JsonNode catalog) {
    this.catalog = catalog;
    return this;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("catalogHash")
  public String getCatalogHash() {
    return catalogHash;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("catalogHash")
  public void setCatalogHash(String catalogHash) {
    this.catalogHash = catalogHash;
  }

  public ActorCatalog withCatalogHash(String catalogHash) {
    this.catalogHash = catalogHash;
    return this;
  }

  @JsonProperty("catalogType")
  public CatalogType getCatalogType() {
    return catalogType;
  }

  @JsonProperty("catalogType")
  public void setCatalogType(CatalogType catalogType) {
    this.catalogType = catalogType;
  }

  public ActorCatalog withCatalogType(CatalogType catalogType) {
    this.catalogType = catalogType;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public ActorCatalog withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(ActorCatalog.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("id");
    sb.append('=');
    sb.append(((this.id == null) ? "<null>" : this.id));
    sb.append(',');
    sb.append("catalog");
    sb.append('=');
    sb.append(((this.catalog == null) ? "<null>" : this.catalog));
    sb.append(',');
    sb.append("catalogHash");
    sb.append('=');
    sb.append(((this.catalogHash == null) ? "<null>" : this.catalogHash));
    sb.append(',');
    sb.append("catalogType");
    sb.append('=');
    sb.append(((this.catalogType == null) ? "<null>" : this.catalogType));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(((this.additionalProperties == null) ? "<null>" : this.additionalProperties));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.id == null) ? 0 : this.id.hashCode()));
    result = ((result * 31) + ((this.additionalProperties == null) ? 0 : this.additionalProperties.hashCode()));
    result = ((result * 31) + ((this.catalogType == null) ? 0 : this.catalogType.hashCode()));
    result = ((result * 31) + ((this.catalog == null) ? 0 : this.catalog.hashCode()));
    result = ((result * 31) + ((this.catalogHash == null) ? 0 : this.catalogHash.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof ActorCatalog) == false) {
      return false;
    }
    ActorCatalog rhs = ((ActorCatalog) other);
    return ((((((this.id == rhs.id) || ((this.id != null) && this.id.equals(rhs.id))) && ((this.additionalProperties == rhs.additionalProperties)
        || ((this.additionalProperties != null) && this.additionalProperties.equals(rhs.additionalProperties))))
        && ((this.catalogType == rhs.catalogType) || ((this.catalogType != null) && this.catalogType.equals(rhs.catalogType))))
        && ((this.catalog == rhs.catalog) || ((this.catalog != null) && this.catalog.equals(rhs.catalog))))
        && ((this.catalogHash == rhs.catalogHash) || ((this.catalogHash != null) && this.catalogHash.equals(rhs.catalogHash))));
  }

  public enum CatalogType {

    SOURCE_CATALOG("source_catalog"),
    DESTINATION_CATALOG("destination_catalog");

    private final String value;
    private final static Map<String, CatalogType> CONSTANTS = new HashMap<String, CatalogType>();

    static {
      for (CatalogType c : values()) {
        CONSTANTS.put(c.value, c);
      }
    }

    private CatalogType(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return this.value;
    }

    @JsonValue
    public String value() {
      return this.value;
    }

    @JsonCreator
    public static CatalogType fromValue(String value) {
      CatalogType constant = CONSTANTS.get(value);
      if (constant == null) {
        throw new IllegalArgumentException(value);
      } else {
        return constant;
      }
    }

  }

}
