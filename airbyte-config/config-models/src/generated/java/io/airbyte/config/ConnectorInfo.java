/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "connectorName",
  "connectorType",
  "connectorDefinitionId",
  "compatibilityMatrix"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class ConnectorInfo implements Serializable {

  @JsonProperty("connectorName")
  private String connectorName;
  @JsonProperty("connectorType")
  private String connectorType;
  @JsonProperty("connectorDefinitionId")
  private UUID connectorDefinitionId;
  @JsonProperty("compatibilityMatrix")
  private List<CompatibilityRule> compatibilityMatrix = new ArrayList<CompatibilityRule>();
  @JsonIgnore
  private Map<String, Object> additionalProperties = new HashMap<String, Object>();
  private final static long serialVersionUID = 8050488829418269183L;

  @JsonProperty("connectorName")
  public String getConnectorName() {
    return connectorName;
  }

  @JsonProperty("connectorName")
  public void setConnectorName(String connectorName) {
    this.connectorName = connectorName;
  }

  public ConnectorInfo withConnectorName(String connectorName) {
    this.connectorName = connectorName;
    return this;
  }

  @JsonProperty("connectorType")
  public String getConnectorType() {
    return connectorType;
  }

  @JsonProperty("connectorType")
  public void setConnectorType(String connectorType) {
    this.connectorType = connectorType;
  }

  public ConnectorInfo withConnectorType(String connectorType) {
    this.connectorType = connectorType;
    return this;
  }

  @JsonProperty("connectorDefinitionId")
  public UUID getConnectorDefinitionId() {
    return connectorDefinitionId;
  }

  @JsonProperty("connectorDefinitionId")
  public void setConnectorDefinitionId(UUID connectorDefinitionId) {
    this.connectorDefinitionId = connectorDefinitionId;
  }

  public ConnectorInfo withConnectorDefinitionId(UUID connectorDefinitionId) {
    this.connectorDefinitionId = connectorDefinitionId;
    return this;
  }

  @JsonProperty("compatibilityMatrix")
  public List<CompatibilityRule> getCompatibilityMatrix() {
    return compatibilityMatrix;
  }

  @JsonProperty("compatibilityMatrix")
  public void setCompatibilityMatrix(List<CompatibilityRule> compatibilityMatrix) {
    this.compatibilityMatrix = compatibilityMatrix;
  }

  public ConnectorInfo withCompatibilityMatrix(List<CompatibilityRule> compatibilityMatrix) {
    this.compatibilityMatrix = compatibilityMatrix;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public ConnectorInfo withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(ConnectorInfo.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("connectorName");
    sb.append('=');
    sb.append(((this.connectorName == null) ? "<null>" : this.connectorName));
    sb.append(',');
    sb.append("connectorType");
    sb.append('=');
    sb.append(((this.connectorType == null) ? "<null>" : this.connectorType));
    sb.append(',');
    sb.append("connectorDefinitionId");
    sb.append('=');
    sb.append(((this.connectorDefinitionId == null) ? "<null>" : this.connectorDefinitionId));
    sb.append(',');
    sb.append("compatibilityMatrix");
    sb.append('=');
    sb.append(((this.compatibilityMatrix == null) ? "<null>" : this.compatibilityMatrix));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(((this.additionalProperties == null) ? "<null>" : this.additionalProperties));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.connectorName == null) ? 0 : this.connectorName.hashCode()));
    result = ((result * 31) + ((this.connectorType == null) ? 0 : this.connectorType.hashCode()));
    result = ((result * 31) + ((this.connectorDefinitionId == null) ? 0 : this.connectorDefinitionId.hashCode()));
    result = ((result * 31) + ((this.compatibilityMatrix == null) ? 0 : this.compatibilityMatrix.hashCode()));
    result = ((result * 31) + ((this.additionalProperties == null) ? 0 : this.additionalProperties.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof ConnectorInfo) == false) {
      return false;
    }
    ConnectorInfo rhs = ((ConnectorInfo) other);
    return ((((((this.connectorName == rhs.connectorName) || ((this.connectorName != null) && this.connectorName.equals(rhs.connectorName)))
        && ((this.connectorType == rhs.connectorType) || ((this.connectorType != null) && this.connectorType.equals(rhs.connectorType))))
        && ((this.connectorDefinitionId == rhs.connectorDefinitionId)
            || ((this.connectorDefinitionId != null) && this.connectorDefinitionId.equals(rhs.connectorDefinitionId))))
        && ((this.compatibilityMatrix == rhs.compatibilityMatrix)
            || ((this.compatibilityMatrix != null) && this.compatibilityMatrix.equals(rhs.compatibilityMatrix))))
        && ((this.additionalProperties == rhs.additionalProperties)
            || ((this.additionalProperties != null) && this.additionalProperties.equals(rhs.additionalProperties))));
  }

}
