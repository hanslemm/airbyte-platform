/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

/**
 * SourceActorConfig
 * <p>
 * Subset of the shared properties for the actor config.
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "use_file_transfer",
  "delivery_method"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class SourceActorConfig implements Serializable {

  @JsonProperty("use_file_transfer")
  private Boolean useFileTransfer = false;
  @JsonProperty("delivery_method")
  private DeliveryMethod deliveryMethod;
  @JsonIgnore
  private Map<String, Object> additionalProperties = new HashMap<String, Object>();
  private final static long serialVersionUID = 3903364058355308689L;

  @JsonProperty("use_file_transfer")
  public Boolean getUseFileTransfer() {
    return useFileTransfer;
  }

  @JsonProperty("use_file_transfer")
  public void setUseFileTransfer(Boolean useFileTransfer) {
    this.useFileTransfer = useFileTransfer;
  }

  public SourceActorConfig withUseFileTransfer(Boolean useFileTransfer) {
    this.useFileTransfer = useFileTransfer;
    return this;
  }

  @JsonProperty("delivery_method")
  public DeliveryMethod getDeliveryMethod() {
    return deliveryMethod;
  }

  @JsonProperty("delivery_method")
  public void setDeliveryMethod(DeliveryMethod deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
  }

  public SourceActorConfig withDeliveryMethod(DeliveryMethod deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public SourceActorConfig withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(SourceActorConfig.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("useFileTransfer");
    sb.append('=');
    sb.append(((this.useFileTransfer == null) ? "<null>" : this.useFileTransfer));
    sb.append(',');
    sb.append("deliveryMethod");
    sb.append('=');
    sb.append(((this.deliveryMethod == null) ? "<null>" : this.deliveryMethod));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(((this.additionalProperties == null) ? "<null>" : this.additionalProperties));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.deliveryMethod == null) ? 0 : this.deliveryMethod.hashCode()));
    result = ((result * 31) + ((this.useFileTransfer == null) ? 0 : this.useFileTransfer.hashCode()));
    result = ((result * 31) + ((this.additionalProperties == null) ? 0 : this.additionalProperties.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof SourceActorConfig) == false) {
      return false;
    }
    SourceActorConfig rhs = ((SourceActorConfig) other);
    return ((((this.deliveryMethod == rhs.deliveryMethod) || ((this.deliveryMethod != null) && this.deliveryMethod.equals(rhs.deliveryMethod)))
        && ((this.useFileTransfer == rhs.useFileTransfer) || ((this.useFileTransfer != null) && this.useFileTransfer.equals(rhs.useFileTransfer))))
        && ((this.additionalProperties == rhs.additionalProperties)
            || ((this.additionalProperties != null) && this.additionalProperties.equals(rhs.additionalProperties))));
  }

}
