/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "commit_sha",
  "commit_timestamp",
  "commit_author",
  "commit_author_email"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class Git implements Serializable {

  /**
   * The git commit sha of the last commit that modified this file.
   *
   */
  @JsonProperty("commit_sha")
  @JsonPropertyDescription("The git commit sha of the last commit that modified this file.")
  private String commitSha;
  /**
   * The git commit timestamp of the last commit that modified this file.
   *
   */
  @JsonProperty("commit_timestamp")
  @JsonPropertyDescription("The git commit timestamp of the last commit that modified this file.")
  private Date commitTimestamp;
  /**
   * The git commit author of the last commit that modified this file.
   *
   */
  @JsonProperty("commit_author")
  @JsonPropertyDescription("The git commit author of the last commit that modified this file.")
  private String commitAuthor;
  /**
   * The git commit author email of the last commit that modified this file.
   *
   */
  @JsonProperty("commit_author_email")
  @JsonPropertyDescription("The git commit author email of the last commit that modified this file.")
  private String commitAuthorEmail;
  @JsonIgnore
  private Map<String, Object> additionalProperties = new HashMap<String, Object>();
  private final static long serialVersionUID = -3582685612896995303L;

  /**
   * The git commit sha of the last commit that modified this file.
   *
   */
  @JsonProperty("commit_sha")
  public String getCommitSha() {
    return commitSha;
  }

  /**
   * The git commit sha of the last commit that modified this file.
   *
   */
  @JsonProperty("commit_sha")
  public void setCommitSha(String commitSha) {
    this.commitSha = commitSha;
  }

  public Git withCommitSha(String commitSha) {
    this.commitSha = commitSha;
    return this;
  }

  /**
   * The git commit timestamp of the last commit that modified this file.
   *
   */
  @JsonProperty("commit_timestamp")
  public Date getCommitTimestamp() {
    return commitTimestamp;
  }

  /**
   * The git commit timestamp of the last commit that modified this file.
   *
   */
  @JsonProperty("commit_timestamp")
  public void setCommitTimestamp(Date commitTimestamp) {
    this.commitTimestamp = commitTimestamp;
  }

  public Git withCommitTimestamp(Date commitTimestamp) {
    this.commitTimestamp = commitTimestamp;
    return this;
  }

  /**
   * The git commit author of the last commit that modified this file.
   *
   */
  @JsonProperty("commit_author")
  public String getCommitAuthor() {
    return commitAuthor;
  }

  /**
   * The git commit author of the last commit that modified this file.
   *
   */
  @JsonProperty("commit_author")
  public void setCommitAuthor(String commitAuthor) {
    this.commitAuthor = commitAuthor;
  }

  public Git withCommitAuthor(String commitAuthor) {
    this.commitAuthor = commitAuthor;
    return this;
  }

  /**
   * The git commit author email of the last commit that modified this file.
   *
   */
  @JsonProperty("commit_author_email")
  public String getCommitAuthorEmail() {
    return commitAuthorEmail;
  }

  /**
   * The git commit author email of the last commit that modified this file.
   *
   */
  @JsonProperty("commit_author_email")
  public void setCommitAuthorEmail(String commitAuthorEmail) {
    this.commitAuthorEmail = commitAuthorEmail;
  }

  public Git withCommitAuthorEmail(String commitAuthorEmail) {
    this.commitAuthorEmail = commitAuthorEmail;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public Git withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(Git.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("commitSha");
    sb.append('=');
    sb.append(((this.commitSha == null) ? "<null>" : this.commitSha));
    sb.append(',');
    sb.append("commitTimestamp");
    sb.append('=');
    sb.append(((this.commitTimestamp == null) ? "<null>" : this.commitTimestamp));
    sb.append(',');
    sb.append("commitAuthor");
    sb.append('=');
    sb.append(((this.commitAuthor == null) ? "<null>" : this.commitAuthor));
    sb.append(',');
    sb.append("commitAuthorEmail");
    sb.append('=');
    sb.append(((this.commitAuthorEmail == null) ? "<null>" : this.commitAuthorEmail));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(((this.additionalProperties == null) ? "<null>" : this.additionalProperties));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.commitSha == null) ? 0 : this.commitSha.hashCode()));
    result = ((result * 31) + ((this.commitAuthorEmail == null) ? 0 : this.commitAuthorEmail.hashCode()));
    result = ((result * 31) + ((this.additionalProperties == null) ? 0 : this.additionalProperties.hashCode()));
    result = ((result * 31) + ((this.commitTimestamp == null) ? 0 : this.commitTimestamp.hashCode()));
    result = ((result * 31) + ((this.commitAuthor == null) ? 0 : this.commitAuthor.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof Git) == false) {
      return false;
    }
    Git rhs = ((Git) other);
    return ((((((this.commitSha == rhs.commitSha) || ((this.commitSha != null) && this.commitSha.equals(rhs.commitSha)))
        && ((this.commitAuthorEmail == rhs.commitAuthorEmail)
            || ((this.commitAuthorEmail != null) && this.commitAuthorEmail.equals(rhs.commitAuthorEmail))))
        && ((this.additionalProperties == rhs.additionalProperties)
            || ((this.additionalProperties != null) && this.additionalProperties.equals(rhs.additionalProperties))))
        && ((this.commitTimestamp == rhs.commitTimestamp) || ((this.commitTimestamp != null) && this.commitTimestamp.equals(rhs.commitTimestamp))))
        && ((this.commitAuthor == rhs.commitAuthor) || ((this.commitAuthor != null) && this.commitAuthor.equals(rhs.commitAuthor))));
  }

}
