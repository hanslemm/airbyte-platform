/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "fieldTransforms",
  "streamAttributeTransforms"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class UpdateStream implements Serializable {

  /**
   * list of field transformations. order does not matter. (Required)
   *
   */
  @JsonProperty("fieldTransforms")
  @JsonPropertyDescription("list of field transformations. order does not matter.")
  private List<FieldTransform> fieldTransforms = new ArrayList<FieldTransform>();
  /**
   * list of stream attribute transformations. order does not matter. (Required)
   *
   */
  @JsonProperty("streamAttributeTransforms")
  @JsonPropertyDescription("list of stream attribute transformations. order does not matter.")
  private List<StreamAttributeTransform> streamAttributeTransforms = new ArrayList<StreamAttributeTransform>();
  @JsonIgnore
  private Map<String, Object> additionalProperties = new HashMap<String, Object>();
  private final static long serialVersionUID = 562294661741261592L;

  /**
   * list of field transformations. order does not matter. (Required)
   *
   */
  @JsonProperty("fieldTransforms")
  public List<FieldTransform> getFieldTransforms() {
    return fieldTransforms;
  }

  /**
   * list of field transformations. order does not matter. (Required)
   *
   */
  @JsonProperty("fieldTransforms")
  public void setFieldTransforms(List<FieldTransform> fieldTransforms) {
    this.fieldTransforms = fieldTransforms;
  }

  public UpdateStream withFieldTransforms(List<FieldTransform> fieldTransforms) {
    this.fieldTransforms = fieldTransforms;
    return this;
  }

  /**
   * list of stream attribute transformations. order does not matter. (Required)
   *
   */
  @JsonProperty("streamAttributeTransforms")
  public List<StreamAttributeTransform> getStreamAttributeTransforms() {
    return streamAttributeTransforms;
  }

  /**
   * list of stream attribute transformations. order does not matter. (Required)
   *
   */
  @JsonProperty("streamAttributeTransforms")
  public void setStreamAttributeTransforms(List<StreamAttributeTransform> streamAttributeTransforms) {
    this.streamAttributeTransforms = streamAttributeTransforms;
  }

  public UpdateStream withStreamAttributeTransforms(List<StreamAttributeTransform> streamAttributeTransforms) {
    this.streamAttributeTransforms = streamAttributeTransforms;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public UpdateStream withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(UpdateStream.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("fieldTransforms");
    sb.append('=');
    sb.append(((this.fieldTransforms == null) ? "<null>" : this.fieldTransforms));
    sb.append(',');
    sb.append("streamAttributeTransforms");
    sb.append('=');
    sb.append(((this.streamAttributeTransforms == null) ? "<null>" : this.streamAttributeTransforms));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(((this.additionalProperties == null) ? "<null>" : this.additionalProperties));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.streamAttributeTransforms == null) ? 0 : this.streamAttributeTransforms.hashCode()));
    result = ((result * 31) + ((this.fieldTransforms == null) ? 0 : this.fieldTransforms.hashCode()));
    result = ((result * 31) + ((this.additionalProperties == null) ? 0 : this.additionalProperties.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof UpdateStream) == false) {
      return false;
    }
    UpdateStream rhs = ((UpdateStream) other);
    return ((((this.streamAttributeTransforms == rhs.streamAttributeTransforms)
        || ((this.streamAttributeTransforms != null) && this.streamAttributeTransforms.equals(rhs.streamAttributeTransforms)))
        && ((this.fieldTransforms == rhs.fieldTransforms) || ((this.fieldTransforms != null) && this.fieldTransforms.equals(rhs.fieldTransforms))))
        && ((this.additionalProperties == rhs.additionalProperties)
            || ((this.additionalProperties != null) && this.additionalProperties.equals(rhs.additionalProperties))));
  }

}
