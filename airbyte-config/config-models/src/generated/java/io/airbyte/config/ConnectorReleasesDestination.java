/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

/**
 * ConnectorReleasesDestination
 * <p>
 * Releases for a destination connector.
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "rolloutConfiguration",
  "releaseCandidates",
  "breakingChanges",
  "migrationDocumentationUrl"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class ConnectorReleasesDestination implements Serializable {

  /**
   * RolloutConfiguration
   * <p>
   * configuration for the rollout of a connector
   *
   */
  @JsonProperty("rolloutConfiguration")
  @JsonPropertyDescription("configuration for the rollout of a connector")
  private RolloutConfiguration rolloutConfiguration;
  /**
   * ReleaseCandidatesDestination
   * <p>
   * Object mapping version numbers to a destination release candidate definition
   *
   */
  @JsonProperty("releaseCandidates")
  @JsonPropertyDescription("Object mapping version numbers to a destination release candidate definition")
  private ReleaseCandidatesDestination releaseCandidates;
  /**
   * BreakingChanges
   * <p>
   * Object mapping version numbers to version breaking changes
   *
   */
  @JsonProperty("breakingChanges")
  @JsonPropertyDescription("Object mapping version numbers to version breaking changes")
  private BreakingChanges breakingChanges;
  /**
   * URL to migration documentation for all versions of the connector.
   *
   */
  @JsonProperty("migrationDocumentationUrl")
  @JsonPropertyDescription("URL to migration documentation for all versions of the connector.")
  private String migrationDocumentationUrl;
  @JsonIgnore
  private Map<String, Object> additionalProperties = new HashMap<String, Object>();
  private final static long serialVersionUID = 8407377433649608308L;

  /**
   * RolloutConfiguration
   * <p>
   * configuration for the rollout of a connector
   *
   */
  @JsonProperty("rolloutConfiguration")
  public RolloutConfiguration getRolloutConfiguration() {
    return rolloutConfiguration;
  }

  /**
   * RolloutConfiguration
   * <p>
   * configuration for the rollout of a connector
   *
   */
  @JsonProperty("rolloutConfiguration")
  public void setRolloutConfiguration(RolloutConfiguration rolloutConfiguration) {
    this.rolloutConfiguration = rolloutConfiguration;
  }

  public ConnectorReleasesDestination withRolloutConfiguration(RolloutConfiguration rolloutConfiguration) {
    this.rolloutConfiguration = rolloutConfiguration;
    return this;
  }

  /**
   * ReleaseCandidatesDestination
   * <p>
   * Object mapping version numbers to a destination release candidate definition
   *
   */
  @JsonProperty("releaseCandidates")
  public ReleaseCandidatesDestination getReleaseCandidates() {
    return releaseCandidates;
  }

  /**
   * ReleaseCandidatesDestination
   * <p>
   * Object mapping version numbers to a destination release candidate definition
   *
   */
  @JsonProperty("releaseCandidates")
  public void setReleaseCandidates(ReleaseCandidatesDestination releaseCandidates) {
    this.releaseCandidates = releaseCandidates;
  }

  public ConnectorReleasesDestination withReleaseCandidates(ReleaseCandidatesDestination releaseCandidates) {
    this.releaseCandidates = releaseCandidates;
    return this;
  }

  /**
   * BreakingChanges
   * <p>
   * Object mapping version numbers to version breaking changes
   *
   */
  @JsonProperty("breakingChanges")
  public BreakingChanges getBreakingChanges() {
    return breakingChanges;
  }

  /**
   * BreakingChanges
   * <p>
   * Object mapping version numbers to version breaking changes
   *
   */
  @JsonProperty("breakingChanges")
  public void setBreakingChanges(BreakingChanges breakingChanges) {
    this.breakingChanges = breakingChanges;
  }

  public ConnectorReleasesDestination withBreakingChanges(BreakingChanges breakingChanges) {
    this.breakingChanges = breakingChanges;
    return this;
  }

  /**
   * URL to migration documentation for all versions of the connector.
   *
   */
  @JsonProperty("migrationDocumentationUrl")
  public String getMigrationDocumentationUrl() {
    return migrationDocumentationUrl;
  }

  /**
   * URL to migration documentation for all versions of the connector.
   *
   */
  @JsonProperty("migrationDocumentationUrl")
  public void setMigrationDocumentationUrl(String migrationDocumentationUrl) {
    this.migrationDocumentationUrl = migrationDocumentationUrl;
  }

  public ConnectorReleasesDestination withMigrationDocumentationUrl(String migrationDocumentationUrl) {
    this.migrationDocumentationUrl = migrationDocumentationUrl;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public ConnectorReleasesDestination withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(ConnectorReleasesDestination.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("rolloutConfiguration");
    sb.append('=');
    sb.append(((this.rolloutConfiguration == null) ? "<null>" : this.rolloutConfiguration));
    sb.append(',');
    sb.append("releaseCandidates");
    sb.append('=');
    sb.append(((this.releaseCandidates == null) ? "<null>" : this.releaseCandidates));
    sb.append(',');
    sb.append("breakingChanges");
    sb.append('=');
    sb.append(((this.breakingChanges == null) ? "<null>" : this.breakingChanges));
    sb.append(',');
    sb.append("migrationDocumentationUrl");
    sb.append('=');
    sb.append(((this.migrationDocumentationUrl == null) ? "<null>" : this.migrationDocumentationUrl));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(((this.additionalProperties == null) ? "<null>" : this.additionalProperties));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.rolloutConfiguration == null) ? 0 : this.rolloutConfiguration.hashCode()));
    result = ((result * 31) + ((this.migrationDocumentationUrl == null) ? 0 : this.migrationDocumentationUrl.hashCode()));
    result = ((result * 31) + ((this.additionalProperties == null) ? 0 : this.additionalProperties.hashCode()));
    result = ((result * 31) + ((this.releaseCandidates == null) ? 0 : this.releaseCandidates.hashCode()));
    result = ((result * 31) + ((this.breakingChanges == null) ? 0 : this.breakingChanges.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof ConnectorReleasesDestination) == false) {
      return false;
    }
    ConnectorReleasesDestination rhs = ((ConnectorReleasesDestination) other);
    return ((((((this.rolloutConfiguration == rhs.rolloutConfiguration)
        || ((this.rolloutConfiguration != null) && this.rolloutConfiguration.equals(rhs.rolloutConfiguration)))
        && ((this.migrationDocumentationUrl == rhs.migrationDocumentationUrl)
            || ((this.migrationDocumentationUrl != null) && this.migrationDocumentationUrl.equals(rhs.migrationDocumentationUrl))))
        && ((this.additionalProperties == rhs.additionalProperties)
            || ((this.additionalProperties != null) && this.additionalProperties.equals(rhs.additionalProperties))))
        && ((this.releaseCandidates == rhs.releaseCandidates)
            || ((this.releaseCandidates != null) && this.releaseCandidates.equals(rhs.releaseCandidates))))
        && ((this.breakingChanges == rhs.breakingChanges) || ((this.breakingChanges != null) && this.breakingChanges.equals(rhs.breakingChanges))));
  }

}
