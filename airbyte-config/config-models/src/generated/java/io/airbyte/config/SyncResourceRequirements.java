/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

/**
 * SyncResourceRequirements
 * <p>
 * Define resource requirements for a sync
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "configKey",
  "destination",
  "orchestrator",
  "source"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class SyncResourceRequirements implements Serializable {

  /**
   * SyncResourceRequirements
   * <p>
   * The Key of a SyncResourceRequirements
   *
   */
  @JsonProperty("configKey")
  @JsonPropertyDescription("The Key of a SyncResourceRequirements")
  private SyncResourceRequirementsKey configKey;
  /**
   * ResourceRequirements
   * <p>
   * generic configuration for pod source requirements
   *
   */
  @JsonProperty("destination")
  @JsonPropertyDescription("generic configuration for pod source requirements")
  private ResourceRequirements destination;
  /**
   * ResourceRequirements
   * <p>
   * generic configuration for pod source requirements
   *
   */
  @JsonProperty("orchestrator")
  @JsonPropertyDescription("generic configuration for pod source requirements")
  private ResourceRequirements orchestrator;
  /**
   * ResourceRequirements
   * <p>
   * generic configuration for pod source requirements
   *
   */
  @JsonProperty("source")
  @JsonPropertyDescription("generic configuration for pod source requirements")
  private ResourceRequirements source;
  @JsonIgnore
  private Map<String, Object> additionalProperties = new HashMap<String, Object>();
  private final static long serialVersionUID = -3145631063520166400L;

  /**
   * SyncResourceRequirements
   * <p>
   * The Key of a SyncResourceRequirements
   *
   */
  @JsonProperty("configKey")
  public SyncResourceRequirementsKey getConfigKey() {
    return configKey;
  }

  /**
   * SyncResourceRequirements
   * <p>
   * The Key of a SyncResourceRequirements
   *
   */
  @JsonProperty("configKey")
  public void setConfigKey(SyncResourceRequirementsKey configKey) {
    this.configKey = configKey;
  }

  public SyncResourceRequirements withConfigKey(SyncResourceRequirementsKey configKey) {
    this.configKey = configKey;
    return this;
  }

  /**
   * ResourceRequirements
   * <p>
   * generic configuration for pod source requirements
   *
   */
  @JsonProperty("destination")
  public ResourceRequirements getDestination() {
    return destination;
  }

  /**
   * ResourceRequirements
   * <p>
   * generic configuration for pod source requirements
   *
   */
  @JsonProperty("destination")
  public void setDestination(ResourceRequirements destination) {
    this.destination = destination;
  }

  public SyncResourceRequirements withDestination(ResourceRequirements destination) {
    this.destination = destination;
    return this;
  }

  /**
   * ResourceRequirements
   * <p>
   * generic configuration for pod source requirements
   *
   */
  @JsonProperty("orchestrator")
  public ResourceRequirements getOrchestrator() {
    return orchestrator;
  }

  /**
   * ResourceRequirements
   * <p>
   * generic configuration for pod source requirements
   *
   */
  @JsonProperty("orchestrator")
  public void setOrchestrator(ResourceRequirements orchestrator) {
    this.orchestrator = orchestrator;
  }

  public SyncResourceRequirements withOrchestrator(ResourceRequirements orchestrator) {
    this.orchestrator = orchestrator;
    return this;
  }

  /**
   * ResourceRequirements
   * <p>
   * generic configuration for pod source requirements
   *
   */
  @JsonProperty("source")
  public ResourceRequirements getSource() {
    return source;
  }

  /**
   * ResourceRequirements
   * <p>
   * generic configuration for pod source requirements
   *
   */
  @JsonProperty("source")
  public void setSource(ResourceRequirements source) {
    this.source = source;
  }

  public SyncResourceRequirements withSource(ResourceRequirements source) {
    this.source = source;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public SyncResourceRequirements withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(SyncResourceRequirements.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("configKey");
    sb.append('=');
    sb.append(((this.configKey == null) ? "<null>" : this.configKey));
    sb.append(',');
    sb.append("destination");
    sb.append('=');
    sb.append(((this.destination == null) ? "<null>" : this.destination));
    sb.append(',');
    sb.append("orchestrator");
    sb.append('=');
    sb.append(((this.orchestrator == null) ? "<null>" : this.orchestrator));
    sb.append(',');
    sb.append("source");
    sb.append('=');
    sb.append(((this.source == null) ? "<null>" : this.source));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(((this.additionalProperties == null) ? "<null>" : this.additionalProperties));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.destination == null) ? 0 : this.destination.hashCode()));
    result = ((result * 31) + ((this.configKey == null) ? 0 : this.configKey.hashCode()));
    result = ((result * 31) + ((this.orchestrator == null) ? 0 : this.orchestrator.hashCode()));
    result = ((result * 31) + ((this.source == null) ? 0 : this.source.hashCode()));
    result = ((result * 31) + ((this.additionalProperties == null) ? 0 : this.additionalProperties.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof SyncResourceRequirements) == false) {
      return false;
    }
    SyncResourceRequirements rhs = ((SyncResourceRequirements) other);
    return ((((((this.destination == rhs.destination) || ((this.destination != null) && this.destination.equals(rhs.destination)))
        && ((this.configKey == rhs.configKey) || ((this.configKey != null) && this.configKey.equals(rhs.configKey))))
        && ((this.orchestrator == rhs.orchestrator) || ((this.orchestrator != null) && this.orchestrator.equals(rhs.orchestrator))))
        && ((this.source == rhs.source) || ((this.source != null) && this.source.equals(rhs.source))))
        && ((this.additionalProperties == rhs.additionalProperties)
            || ((this.additionalProperties != null) && this.additionalProperties.equals(rhs.additionalProperties))));
  }

}
