/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.databind.JsonNode;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * StandardCheckConnectionInput
 * <p>
 * information required for connection.
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "actorType",
  "actorId",
  "connectionConfiguration",
  "resourceRequirements",
  "actorContext",
  "networkSecurityTokens"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class StandardCheckConnectionInput implements Serializable {

  /**
   * ActorType
   * <p>
   * enum that describes different types of actors
   *
   */
  @JsonProperty("actorType")
  @JsonPropertyDescription("enum that describes different types of actors")
  private ActorType actorType;
  /**
   * The ID of the actor being checked, so we can persist config updates
   *
   */
  @JsonProperty("actorId")
  @JsonPropertyDescription("The ID of the actor being checked, so we can persist config updates")
  private UUID actorId;
  /**
   * Integration specific blob. Must be a valid JSON string. (Required)
   *
   */
  @JsonProperty("connectionConfiguration")
  @JsonPropertyDescription("Integration specific blob. Must be a valid JSON string.")
  private JsonNode connectionConfiguration;
  /**
   * ResourceRequirements
   * <p>
   * generic configuration for pod source requirements
   *
   */
  @JsonProperty("resourceRequirements")
  @JsonPropertyDescription("generic configuration for pod source requirements")
  private ResourceRequirements resourceRequirements;
  /**
   * ActorContext
   * <p>
   * Actor context to be passed to a temporal workflow and its activities/child workflows.
   *
   */
  @JsonProperty("actorContext")
  @JsonPropertyDescription("Actor context to be passed to a temporal workflow and its activities/child workflows.")
  private ActorContext actorContext;
  /**
   * Workload launcher will use these to grant pods additional network access
   *
   */
  @JsonProperty("networkSecurityTokens")
  @JsonPropertyDescription("Workload launcher will use these to grant pods additional network access")
  private List<String> networkSecurityTokens = new ArrayList<String>();
  @JsonIgnore
  private Map<String, Object> additionalProperties = new HashMap<String, Object>();
  private final static long serialVersionUID = 5507505761190000463L;

  /**
   * ActorType
   * <p>
   * enum that describes different types of actors
   *
   */
  @JsonProperty("actorType")
  public ActorType getActorType() {
    return actorType;
  }

  /**
   * ActorType
   * <p>
   * enum that describes different types of actors
   *
   */
  @JsonProperty("actorType")
  public void setActorType(ActorType actorType) {
    this.actorType = actorType;
  }

  public StandardCheckConnectionInput withActorType(ActorType actorType) {
    this.actorType = actorType;
    return this;
  }

  /**
   * The ID of the actor being checked, so we can persist config updates
   *
   */
  @JsonProperty("actorId")
  public UUID getActorId() {
    return actorId;
  }

  /**
   * The ID of the actor being checked, so we can persist config updates
   *
   */
  @JsonProperty("actorId")
  public void setActorId(UUID actorId) {
    this.actorId = actorId;
  }

  public StandardCheckConnectionInput withActorId(UUID actorId) {
    this.actorId = actorId;
    return this;
  }

  /**
   * Integration specific blob. Must be a valid JSON string. (Required)
   *
   */
  @JsonProperty("connectionConfiguration")
  public JsonNode getConnectionConfiguration() {
    return connectionConfiguration;
  }

  /**
   * Integration specific blob. Must be a valid JSON string. (Required)
   *
   */
  @JsonProperty("connectionConfiguration")
  public void setConnectionConfiguration(JsonNode connectionConfiguration) {
    this.connectionConfiguration = connectionConfiguration;
  }

  public StandardCheckConnectionInput withConnectionConfiguration(JsonNode connectionConfiguration) {
    this.connectionConfiguration = connectionConfiguration;
    return this;
  }

  /**
   * ResourceRequirements
   * <p>
   * generic configuration for pod source requirements
   *
   */
  @JsonProperty("resourceRequirements")
  public ResourceRequirements getResourceRequirements() {
    return resourceRequirements;
  }

  /**
   * ResourceRequirements
   * <p>
   * generic configuration for pod source requirements
   *
   */
  @JsonProperty("resourceRequirements")
  public void setResourceRequirements(ResourceRequirements resourceRequirements) {
    this.resourceRequirements = resourceRequirements;
  }

  public StandardCheckConnectionInput withResourceRequirements(ResourceRequirements resourceRequirements) {
    this.resourceRequirements = resourceRequirements;
    return this;
  }

  /**
   * ActorContext
   * <p>
   * Actor context to be passed to a temporal workflow and its activities/child workflows.
   *
   */
  @JsonProperty("actorContext")
  public ActorContext getActorContext() {
    return actorContext;
  }

  /**
   * ActorContext
   * <p>
   * Actor context to be passed to a temporal workflow and its activities/child workflows.
   *
   */
  @JsonProperty("actorContext")
  public void setActorContext(ActorContext actorContext) {
    this.actorContext = actorContext;
  }

  public StandardCheckConnectionInput withActorContext(ActorContext actorContext) {
    this.actorContext = actorContext;
    return this;
  }

  /**
   * Workload launcher will use these to grant pods additional network access
   *
   */
  @JsonProperty("networkSecurityTokens")
  public List<String> getNetworkSecurityTokens() {
    return networkSecurityTokens;
  }

  /**
   * Workload launcher will use these to grant pods additional network access
   *
   */
  @JsonProperty("networkSecurityTokens")
  public void setNetworkSecurityTokens(List<String> networkSecurityTokens) {
    this.networkSecurityTokens = networkSecurityTokens;
  }

  public StandardCheckConnectionInput withNetworkSecurityTokens(List<String> networkSecurityTokens) {
    this.networkSecurityTokens = networkSecurityTokens;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public StandardCheckConnectionInput withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(StandardCheckConnectionInput.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("actorType");
    sb.append('=');
    sb.append(((this.actorType == null) ? "<null>" : this.actorType));
    sb.append(',');
    sb.append("actorId");
    sb.append('=');
    sb.append(((this.actorId == null) ? "<null>" : this.actorId));
    sb.append(',');
    sb.append("connectionConfiguration");
    sb.append('=');
    sb.append(((this.connectionConfiguration == null) ? "<null>" : this.connectionConfiguration));
    sb.append(',');
    sb.append("resourceRequirements");
    sb.append('=');
    sb.append(((this.resourceRequirements == null) ? "<null>" : this.resourceRequirements));
    sb.append(',');
    sb.append("actorContext");
    sb.append('=');
    sb.append(((this.actorContext == null) ? "<null>" : this.actorContext));
    sb.append(',');
    sb.append("networkSecurityTokens");
    sb.append('=');
    sb.append(((this.networkSecurityTokens == null) ? "<null>" : this.networkSecurityTokens));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(((this.additionalProperties == null) ? "<null>" : this.additionalProperties));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.resourceRequirements == null) ? 0 : this.resourceRequirements.hashCode()));
    result = ((result * 31) + ((this.actorType == null) ? 0 : this.actorType.hashCode()));
    result = ((result * 31) + ((this.actorId == null) ? 0 : this.actorId.hashCode()));
    result = ((result * 31) + ((this.actorContext == null) ? 0 : this.actorContext.hashCode()));
    result = ((result * 31) + ((this.connectionConfiguration == null) ? 0 : this.connectionConfiguration.hashCode()));
    result = ((result * 31) + ((this.networkSecurityTokens == null) ? 0 : this.networkSecurityTokens.hashCode()));
    result = ((result * 31) + ((this.additionalProperties == null) ? 0 : this.additionalProperties.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof StandardCheckConnectionInput) == false) {
      return false;
    }
    StandardCheckConnectionInput rhs = ((StandardCheckConnectionInput) other);
    return ((((((((this.resourceRequirements == rhs.resourceRequirements)
        || ((this.resourceRequirements != null) && this.resourceRequirements.equals(rhs.resourceRequirements)))
        && ((this.actorType == rhs.actorType) || ((this.actorType != null) && this.actorType.equals(rhs.actorType))))
        && ((this.actorId == rhs.actorId) || ((this.actorId != null) && this.actorId.equals(rhs.actorId))))
        && ((this.actorContext == rhs.actorContext) || ((this.actorContext != null) && this.actorContext.equals(rhs.actorContext))))
        && ((this.connectionConfiguration == rhs.connectionConfiguration)
            || ((this.connectionConfiguration != null) && this.connectionConfiguration.equals(rhs.connectionConfiguration))))
        && ((this.networkSecurityTokens == rhs.networkSecurityTokens)
            || ((this.networkSecurityTokens != null) && this.networkSecurityTokens.equals(rhs.networkSecurityTokens))))
        && ((this.additionalProperties == rhs.additionalProperties)
            || ((this.additionalProperties != null) && this.additionalProperties.equals(rhs.additionalProperties))));
  }

}
