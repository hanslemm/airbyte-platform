/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.UUID;

/**
 * Dataplane
 * <p>
 * dataplane entry
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "id",
  "dataplane_group_id",
  "name",
  "enabled",
  "created_at",
  "updated_at",
  "tombstone",
  "service_account_id"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class Dataplane implements Serializable {

  /**
   * Unique ID of the data plane (Required)
   *
   */
  @JsonProperty("id")
  @JsonPropertyDescription("Unique ID of the data plane")
  private UUID id;
  /**
   * Dataplane group to which the data plane is assigned (Required)
   *
   */
  @JsonProperty("dataplane_group_id")
  @JsonPropertyDescription("Dataplane group to which the data plane is assigned")
  private UUID dataplaneGroupId;
  /**
   * Name of the dataplane (Required)
   *
   */
  @JsonProperty("name")
  @JsonPropertyDescription("Name of the dataplane")
  private String name;
  /**
   * Whether the dataplane is enabled (Required)
   *
   */
  @JsonProperty("enabled")
  @JsonPropertyDescription("Whether the dataplane is enabled")
  private Boolean enabled;
  /**
   *
   * (Required)
   *
   */
  @JsonProperty("created_at")
  private Long createdAt;
  /**
   *
   * (Required)
   *
   */
  @JsonProperty("updated_at")
  private Long updatedAt;
  /**
   * Whether the dataplane is marked as deleted (Required)
   *
   */
  @JsonProperty("tombstone")
  @JsonPropertyDescription("Whether the dataplane is marked as deleted")
  private Boolean tombstone;
  /**
   * id of the service account that manages this dataplane, if any
   *
   */
  @JsonProperty("service_account_id")
  @JsonPropertyDescription("id of the service account that manages this dataplane, if any")
  private UUID serviceAccountId;
  @JsonIgnore
  private Map<String, Object> additionalProperties = new HashMap<String, Object>();
  private final static long serialVersionUID = 4971914348007596426L;

  /**
   * Unique ID of the data plane (Required)
   *
   */
  @JsonProperty("id")
  public UUID getId() {
    return id;
  }

  /**
   * Unique ID of the data plane (Required)
   *
   */
  @JsonProperty("id")
  public void setId(UUID id) {
    this.id = id;
  }

  public Dataplane withId(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Dataplane group to which the data plane is assigned (Required)
   *
   */
  @JsonProperty("dataplane_group_id")
  public UUID getDataplaneGroupId() {
    return dataplaneGroupId;
  }

  /**
   * Dataplane group to which the data plane is assigned (Required)
   *
   */
  @JsonProperty("dataplane_group_id")
  public void setDataplaneGroupId(UUID dataplaneGroupId) {
    this.dataplaneGroupId = dataplaneGroupId;
  }

  public Dataplane withDataplaneGroupId(UUID dataplaneGroupId) {
    this.dataplaneGroupId = dataplaneGroupId;
    return this;
  }

  /**
   * Name of the dataplane (Required)
   *
   */
  @JsonProperty("name")
  public String getName() {
    return name;
  }

  /**
   * Name of the dataplane (Required)
   *
   */
  @JsonProperty("name")
  public void setName(String name) {
    this.name = name;
  }

  public Dataplane withName(String name) {
    this.name = name;
    return this;
  }

  /**
   * Whether the dataplane is enabled (Required)
   *
   */
  @JsonProperty("enabled")
  public Boolean getEnabled() {
    return enabled;
  }

  /**
   * Whether the dataplane is enabled (Required)
   *
   */
  @JsonProperty("enabled")
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public Dataplane withEnabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("created_at")
  public Long getCreatedAt() {
    return createdAt;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("created_at")
  public void setCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
  }

  public Dataplane withCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("updated_at")
  public Long getUpdatedAt() {
    return updatedAt;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("updated_at")
  public void setUpdatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
  }

  public Dataplane withUpdatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Whether the dataplane is marked as deleted (Required)
   *
   */
  @JsonProperty("tombstone")
  public Boolean getTombstone() {
    return tombstone;
  }

  /**
   * Whether the dataplane is marked as deleted (Required)
   *
   */
  @JsonProperty("tombstone")
  public void setTombstone(Boolean tombstone) {
    this.tombstone = tombstone;
  }

  public Dataplane withTombstone(Boolean tombstone) {
    this.tombstone = tombstone;
    return this;
  }

  /**
   * id of the service account that manages this dataplane, if any
   *
   */
  @JsonProperty("service_account_id")
  public UUID getServiceAccountId() {
    return serviceAccountId;
  }

  /**
   * id of the service account that manages this dataplane, if any
   *
   */
  @JsonProperty("service_account_id")
  public void setServiceAccountId(UUID serviceAccountId) {
    this.serviceAccountId = serviceAccountId;
  }

  public Dataplane withServiceAccountId(UUID serviceAccountId) {
    this.serviceAccountId = serviceAccountId;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public Dataplane withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(Dataplane.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("id");
    sb.append('=');
    sb.append(((this.id == null) ? "<null>" : this.id));
    sb.append(',');
    sb.append("dataplaneGroupId");
    sb.append('=');
    sb.append(((this.dataplaneGroupId == null) ? "<null>" : this.dataplaneGroupId));
    sb.append(',');
    sb.append("name");
    sb.append('=');
    sb.append(((this.name == null) ? "<null>" : this.name));
    sb.append(',');
    sb.append("enabled");
    sb.append('=');
    sb.append(((this.enabled == null) ? "<null>" : this.enabled));
    sb.append(',');
    sb.append("createdAt");
    sb.append('=');
    sb.append(((this.createdAt == null) ? "<null>" : this.createdAt));
    sb.append(',');
    sb.append("updatedAt");
    sb.append('=');
    sb.append(((this.updatedAt == null) ? "<null>" : this.updatedAt));
    sb.append(',');
    sb.append("tombstone");
    sb.append('=');
    sb.append(((this.tombstone == null) ? "<null>" : this.tombstone));
    sb.append(',');
    sb.append("serviceAccountId");
    sb.append('=');
    sb.append(((this.serviceAccountId == null) ? "<null>" : this.serviceAccountId));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(((this.additionalProperties == null) ? "<null>" : this.additionalProperties));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.serviceAccountId == null) ? 0 : this.serviceAccountId.hashCode()));
    result = ((result * 31) + ((this.createdAt == null) ? 0 : this.createdAt.hashCode()));
    result = ((result * 31) + ((this.tombstone == null) ? 0 : this.tombstone.hashCode()));
    result = ((result * 31) + ((this.dataplaneGroupId == null) ? 0 : this.dataplaneGroupId.hashCode()));
    result = ((result * 31) + ((this.name == null) ? 0 : this.name.hashCode()));
    result = ((result * 31) + ((this.id == null) ? 0 : this.id.hashCode()));
    result = ((result * 31) + ((this.additionalProperties == null) ? 0 : this.additionalProperties.hashCode()));
    result = ((result * 31) + ((this.enabled == null) ? 0 : this.enabled.hashCode()));
    result = ((result * 31) + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof Dataplane) == false) {
      return false;
    }
    Dataplane rhs = ((Dataplane) other);
    return (((((((((Objects.equals(this.serviceAccountId, rhs.serviceAccountId))
        && ((Objects.equals(this.createdAt, rhs.createdAt)) || ((this.createdAt != null) && this.createdAt.equals(rhs.createdAt))))
        && (Objects.equals(this.tombstone, rhs.tombstone)))
        && (Objects.equals(this.dataplaneGroupId, rhs.dataplaneGroupId)))
        && ((Objects.equals(this.name, rhs.name)) || ((this.name != null) && this.name.equals(rhs.name))))
        && (Objects.equals(this.id, rhs.id)))
        && (Objects.equals(this.additionalProperties, rhs.additionalProperties)))
        && (Objects.equals(this.enabled, rhs.enabled)))
        && ((Objects.equals(this.updatedAt, rhs.updatedAt)) || ((this.updatedAt != null) && this.updatedAt.equals(rhs.updatedAt))));
  }

}
