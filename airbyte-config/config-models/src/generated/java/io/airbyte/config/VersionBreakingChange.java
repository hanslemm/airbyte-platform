/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * ConnectorReleaseBreakingChange
 * <p>
 * Contains information about a breaking change, including the deadline to upgrade, a link to the
 * migration documentation, a message detailing the change and an optional impact scope.
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "upgradeDeadline",
  "message",
  "migrationDocumentationUrl",
  "scopedImpact",
  "deadlineAction"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class VersionBreakingChange implements Serializable {

  /**
   * The deadline by which to upgrade before the breaking change takes effect. (Required)
   *
   */
  @JsonProperty("upgradeDeadline")
  @JsonPropertyDescription("The deadline by which to upgrade before the breaking change takes effect.")
  private String upgradeDeadline;
  /**
   * Descriptive message detailing the breaking change. (Required)
   *
   */
  @JsonProperty("message")
  @JsonPropertyDescription("Descriptive message detailing the breaking change.")
  private String message;
  /**
   * (Header-specific) URL to documentation on how to migrate to this version. (Required)
   *
   */
  @JsonProperty("migrationDocumentationUrl")
  @JsonPropertyDescription("(Header-specific) URL to documentation on how to migrate to this version.")
  private String migrationDocumentationUrl;
  /**
   * List of scopes that are impacted by the breaking change. If not specified, the breaking change
   * cannot be scoped to reduce impact via the supported scope types.
   *
   */
  @JsonProperty("scopedImpact")
  @JsonPropertyDescription("List of scopes that are impacted by the breaking change. If not specified, the breaking change cannot be scoped to reduce impact via the supported scope types.")
  private List<BreakingChangeScope> scopedImpact = new ArrayList<BreakingChangeScope>();
  /**
   * Action to do when the deadline is reached.
   *
   */
  @JsonProperty("deadlineAction")
  @JsonPropertyDescription("Action to do when the deadline is reached.")
  private String deadlineAction;
  @JsonIgnore
  private Map<String, Object> additionalProperties = new HashMap<String, Object>();
  private final static long serialVersionUID = 750523217817462804L;

  /**
   * The deadline by which to upgrade before the breaking change takes effect. (Required)
   *
   */
  @JsonProperty("upgradeDeadline")
  public String getUpgradeDeadline() {
    return upgradeDeadline;
  }

  /**
   * The deadline by which to upgrade before the breaking change takes effect. (Required)
   *
   */
  @JsonProperty("upgradeDeadline")
  public void setUpgradeDeadline(String upgradeDeadline) {
    this.upgradeDeadline = upgradeDeadline;
  }

  public VersionBreakingChange withUpgradeDeadline(String upgradeDeadline) {
    this.upgradeDeadline = upgradeDeadline;
    return this;
  }

  /**
   * Descriptive message detailing the breaking change. (Required)
   *
   */
  @JsonProperty("message")
  public String getMessage() {
    return message;
  }

  /**
   * Descriptive message detailing the breaking change. (Required)
   *
   */
  @JsonProperty("message")
  public void setMessage(String message) {
    this.message = message;
  }

  public VersionBreakingChange withMessage(String message) {
    this.message = message;
    return this;
  }

  /**
   * (Header-specific) URL to documentation on how to migrate to this version. (Required)
   *
   */
  @JsonProperty("migrationDocumentationUrl")
  public String getMigrationDocumentationUrl() {
    return migrationDocumentationUrl;
  }

  /**
   * (Header-specific) URL to documentation on how to migrate to this version. (Required)
   *
   */
  @JsonProperty("migrationDocumentationUrl")
  public void setMigrationDocumentationUrl(String migrationDocumentationUrl) {
    this.migrationDocumentationUrl = migrationDocumentationUrl;
  }

  public VersionBreakingChange withMigrationDocumentationUrl(String migrationDocumentationUrl) {
    this.migrationDocumentationUrl = migrationDocumentationUrl;
    return this;
  }

  /**
   * List of scopes that are impacted by the breaking change. If not specified, the breaking change
   * cannot be scoped to reduce impact via the supported scope types.
   *
   */
  @JsonProperty("scopedImpact")
  public List<BreakingChangeScope> getScopedImpact() {
    return scopedImpact;
  }

  /**
   * List of scopes that are impacted by the breaking change. If not specified, the breaking change
   * cannot be scoped to reduce impact via the supported scope types.
   *
   */
  @JsonProperty("scopedImpact")
  public void setScopedImpact(List<BreakingChangeScope> scopedImpact) {
    this.scopedImpact = scopedImpact;
  }

  public VersionBreakingChange withScopedImpact(List<BreakingChangeScope> scopedImpact) {
    this.scopedImpact = scopedImpact;
    return this;
  }

  /**
   * Action to do when the deadline is reached.
   *
   */
  @JsonProperty("deadlineAction")
  public String getDeadlineAction() {
    return deadlineAction;
  }

  /**
   * Action to do when the deadline is reached.
   *
   */
  @JsonProperty("deadlineAction")
  public void setDeadlineAction(String deadlineAction) {
    this.deadlineAction = deadlineAction;
  }

  public VersionBreakingChange withDeadlineAction(String deadlineAction) {
    this.deadlineAction = deadlineAction;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public VersionBreakingChange withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(VersionBreakingChange.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("upgradeDeadline");
    sb.append('=');
    sb.append(((this.upgradeDeadline == null) ? "<null>" : this.upgradeDeadline));
    sb.append(',');
    sb.append("message");
    sb.append('=');
    sb.append(((this.message == null) ? "<null>" : this.message));
    sb.append(',');
    sb.append("migrationDocumentationUrl");
    sb.append('=');
    sb.append(((this.migrationDocumentationUrl == null) ? "<null>" : this.migrationDocumentationUrl));
    sb.append(',');
    sb.append("scopedImpact");
    sb.append('=');
    sb.append(((this.scopedImpact == null) ? "<null>" : this.scopedImpact));
    sb.append(',');
    sb.append("deadlineAction");
    sb.append('=');
    sb.append(((this.deadlineAction == null) ? "<null>" : this.deadlineAction));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(((this.additionalProperties == null) ? "<null>" : this.additionalProperties));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.migrationDocumentationUrl == null) ? 0 : this.migrationDocumentationUrl.hashCode()));
    result = ((result * 31) + ((this.additionalProperties == null) ? 0 : this.additionalProperties.hashCode()));
    result = ((result * 31) + ((this.message == null) ? 0 : this.message.hashCode()));
    result = ((result * 31) + ((this.deadlineAction == null) ? 0 : this.deadlineAction.hashCode()));
    result = ((result * 31) + ((this.upgradeDeadline == null) ? 0 : this.upgradeDeadline.hashCode()));
    result = ((result * 31) + ((this.scopedImpact == null) ? 0 : this.scopedImpact.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof VersionBreakingChange) == false) {
      return false;
    }
    VersionBreakingChange rhs = ((VersionBreakingChange) other);
    return (((((((this.migrationDocumentationUrl == rhs.migrationDocumentationUrl)
        || ((this.migrationDocumentationUrl != null) && this.migrationDocumentationUrl.equals(rhs.migrationDocumentationUrl)))
        && ((this.additionalProperties == rhs.additionalProperties)
            || ((this.additionalProperties != null) && this.additionalProperties.equals(rhs.additionalProperties))))
        && ((this.message == rhs.message) || ((this.message != null) && this.message.equals(rhs.message))))
        && ((this.deadlineAction == rhs.deadlineAction) || ((this.deadlineAction != null) && this.deadlineAction.equals(rhs.deadlineAction))))
        && ((this.upgradeDeadline == rhs.upgradeDeadline) || ((this.upgradeDeadline != null) && this.upgradeDeadline.equals(rhs.upgradeDeadline))))
        && ((this.scopedImpact == rhs.scopedImpact) || ((this.scopedImpact != null) && this.scopedImpact.equals(rhs.scopedImpact))));
  }

}
