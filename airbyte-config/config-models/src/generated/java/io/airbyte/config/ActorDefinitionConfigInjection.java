/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.databind.JsonNode;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

/**
 * ActorDefinitionConfigInjection
 * <p>
 * JSON object that is injected into the config for every run of the referenced actor definition
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "injectionPath",
  "actorDefinitionId",
  "jsonToInject"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class ActorDefinitionConfigInjection implements Serializable {

  /**
   * Name of the property of the root object of the configuration to inject into. Does not support
   * deep paths via dot notation. (Required)
   *
   */
  @JsonProperty("injectionPath")
  @JsonPropertyDescription("Name of the property of the root object of the configuration to inject into. Does not support deep paths via dot notation.")
  private String injectionPath;
  /**
   *
   * (Required)
   *
   */
  @JsonProperty("actorDefinitionId")
  private UUID actorDefinitionId;
  /**
   * Integration specific blob. Must be a valid JSON string. (Required)
   *
   */
  @JsonProperty("jsonToInject")
  @JsonPropertyDescription("Integration specific blob. Must be a valid JSON string.")
  private JsonNode jsonToInject;
  @JsonIgnore
  private Map<String, Object> additionalProperties = new HashMap<String, Object>();
  private final static long serialVersionUID = -6242939251218114712L;

  /**
   * Name of the property of the root object of the configuration to inject into. Does not support
   * deep paths via dot notation. (Required)
   *
   */
  @JsonProperty("injectionPath")
  public String getInjectionPath() {
    return injectionPath;
  }

  /**
   * Name of the property of the root object of the configuration to inject into. Does not support
   * deep paths via dot notation. (Required)
   *
   */
  @JsonProperty("injectionPath")
  public void setInjectionPath(String injectionPath) {
    this.injectionPath = injectionPath;
  }

  public ActorDefinitionConfigInjection withInjectionPath(String injectionPath) {
    this.injectionPath = injectionPath;
    return this;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("actorDefinitionId")
  public UUID getActorDefinitionId() {
    return actorDefinitionId;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("actorDefinitionId")
  public void setActorDefinitionId(UUID actorDefinitionId) {
    this.actorDefinitionId = actorDefinitionId;
  }

  public ActorDefinitionConfigInjection withActorDefinitionId(UUID actorDefinitionId) {
    this.actorDefinitionId = actorDefinitionId;
    return this;
  }

  /**
   * Integration specific blob. Must be a valid JSON string. (Required)
   *
   */
  @JsonProperty("jsonToInject")
  public JsonNode getJsonToInject() {
    return jsonToInject;
  }

  /**
   * Integration specific blob. Must be a valid JSON string. (Required)
   *
   */
  @JsonProperty("jsonToInject")
  public void setJsonToInject(JsonNode jsonToInject) {
    this.jsonToInject = jsonToInject;
  }

  public ActorDefinitionConfigInjection withJsonToInject(JsonNode jsonToInject) {
    this.jsonToInject = jsonToInject;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public ActorDefinitionConfigInjection withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(ActorDefinitionConfigInjection.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("injectionPath");
    sb.append('=');
    sb.append(((this.injectionPath == null) ? "<null>" : this.injectionPath));
    sb.append(',');
    sb.append("actorDefinitionId");
    sb.append('=');
    sb.append(((this.actorDefinitionId == null) ? "<null>" : this.actorDefinitionId));
    sb.append(',');
    sb.append("jsonToInject");
    sb.append('=');
    sb.append(((this.jsonToInject == null) ? "<null>" : this.jsonToInject));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(((this.additionalProperties == null) ? "<null>" : this.additionalProperties));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.actorDefinitionId == null) ? 0 : this.actorDefinitionId.hashCode()));
    result = ((result * 31) + ((this.additionalProperties == null) ? 0 : this.additionalProperties.hashCode()));
    result = ((result * 31) + ((this.injectionPath == null) ? 0 : this.injectionPath.hashCode()));
    result = ((result * 31) + ((this.jsonToInject == null) ? 0 : this.jsonToInject.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof ActorDefinitionConfigInjection) == false) {
      return false;
    }
    ActorDefinitionConfigInjection rhs = ((ActorDefinitionConfigInjection) other);
    return (((((this.actorDefinitionId == rhs.actorDefinitionId)
        || ((this.actorDefinitionId != null) && this.actorDefinitionId.equals(rhs.actorDefinitionId)))
        && ((this.additionalProperties == rhs.additionalProperties)
            || ((this.additionalProperties != null) && this.additionalProperties.equals(rhs.additionalProperties))))
        && ((this.injectionPath == rhs.injectionPath) || ((this.injectionPath != null) && this.injectionPath.equals(rhs.injectionPath))))
        && ((this.jsonToInject == rhs.jsonToInject) || ((this.jsonToInject != null) && this.jsonToInject.equals(rhs.jsonToInject))));
  }

}
