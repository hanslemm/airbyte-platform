/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.config;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.annotation.Generated;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * StreamDescriptorForDestination
 * <p>
 *
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "namespaceDefinition",
  "namespaceFormat",
  "prefix",
  "streamName",
  "streamNamespace",
  "connectionIds"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class StreamDescriptorForDestination implements Serializable {

  /**
   * Namespace Definition
   * <p>
   * Method used for computing final namespace in destination (Required)
   *
   */
  @JsonProperty("namespaceDefinition")
  @JsonPropertyDescription("Method used for computing final namespace in destination")
  private JobSyncConfig.NamespaceDefinitionType namespaceDefinition = JobSyncConfig.NamespaceDefinitionType.fromValue("source");
  /**
   *
   * (Required)
   *
   */
  @JsonProperty("namespaceFormat")
  private String namespaceFormat = null;
  /**
   * Prefix to prepend to stream names (Required)
   *
   */
  @JsonProperty("prefix")
  @JsonPropertyDescription("Prefix to prepend to stream names")
  private String prefix;
  /**
   * Name of the stream (Required)
   *
   */
  @JsonProperty("streamName")
  @JsonPropertyDescription("Name of the stream")
  private String streamName;
  /**
   * Namespace of the stream (Required)
   *
   */
  @JsonProperty("streamNamespace")
  @JsonPropertyDescription("Namespace of the stream")
  private String streamNamespace;
  /**
   * List of connection IDs using this stream configuration (Required)
   *
   */
  @JsonProperty("connectionIds")
  @JsonPropertyDescription("List of connection IDs using this stream configuration")
  private List<UUID> connectionIds = new ArrayList<UUID>();
  @JsonIgnore
  private Map<String, Object> additionalProperties = new HashMap<String, Object>();
  private final static long serialVersionUID = -7459892916641856174L;

  /**
   * Namespace Definition
   * <p>
   * Method used for computing final namespace in destination (Required)
   *
   */
  @JsonProperty("namespaceDefinition")
  public JobSyncConfig.NamespaceDefinitionType getNamespaceDefinition() {
    return namespaceDefinition;
  }

  /**
   * Namespace Definition
   * <p>
   * Method used for computing final namespace in destination (Required)
   *
   */
  @JsonProperty("namespaceDefinition")
  public void setNamespaceDefinition(JobSyncConfig.NamespaceDefinitionType namespaceDefinition) {
    this.namespaceDefinition = namespaceDefinition;
  }

  public StreamDescriptorForDestination withNamespaceDefinition(JobSyncConfig.NamespaceDefinitionType namespaceDefinition) {
    this.namespaceDefinition = namespaceDefinition;
    return this;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("namespaceFormat")
  public String getNamespaceFormat() {
    return namespaceFormat;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("namespaceFormat")
  public void setNamespaceFormat(String namespaceFormat) {
    this.namespaceFormat = namespaceFormat;
  }

  public StreamDescriptorForDestination withNamespaceFormat(String namespaceFormat) {
    this.namespaceFormat = namespaceFormat;
    return this;
  }

  /**
   * Prefix to prepend to stream names (Required)
   *
   */
  @JsonProperty("prefix")
  public String getPrefix() {
    return prefix;
  }

  /**
   * Prefix to prepend to stream names (Required)
   *
   */
  @JsonProperty("prefix")
  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }

  public StreamDescriptorForDestination withPrefix(String prefix) {
    this.prefix = prefix;
    return this;
  }

  /**
   * Name of the stream (Required)
   *
   */
  @JsonProperty("streamName")
  public String getStreamName() {
    return streamName;
  }

  /**
   * Name of the stream (Required)
   *
   */
  @JsonProperty("streamName")
  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }

  public StreamDescriptorForDestination withStreamName(String streamName) {
    this.streamName = streamName;
    return this;
  }

  /**
   * Namespace of the stream (Required)
   *
   */
  @JsonProperty("streamNamespace")
  public String getStreamNamespace() {
    return streamNamespace;
  }

  /**
   * Namespace of the stream (Required)
   *
   */
  @JsonProperty("streamNamespace")
  public void setStreamNamespace(String streamNamespace) {
    this.streamNamespace = streamNamespace;
  }

  public StreamDescriptorForDestination withStreamNamespace(String streamNamespace) {
    this.streamNamespace = streamNamespace;
    return this;
  }

  /**
   * List of connection IDs using this stream configuration (Required)
   *
   */
  @JsonProperty("connectionIds")
  public List<UUID> getConnectionIds() {
    return connectionIds;
  }

  /**
   * List of connection IDs using this stream configuration (Required)
   *
   */
  @JsonProperty("connectionIds")
  public void setConnectionIds(List<UUID> connectionIds) {
    this.connectionIds = connectionIds;
  }

  public StreamDescriptorForDestination withConnectionIds(List<UUID> connectionIds) {
    this.connectionIds = connectionIds;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public StreamDescriptorForDestination withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(StreamDescriptorForDestination.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("namespaceDefinition");
    sb.append('=');
    sb.append(((this.namespaceDefinition == null) ? "<null>" : this.namespaceDefinition));
    sb.append(',');
    sb.append("namespaceFormat");
    sb.append('=');
    sb.append(((this.namespaceFormat == null) ? "<null>" : this.namespaceFormat));
    sb.append(',');
    sb.append("prefix");
    sb.append('=');
    sb.append(((this.prefix == null) ? "<null>" : this.prefix));
    sb.append(',');
    sb.append("streamName");
    sb.append('=');
    sb.append(((this.streamName == null) ? "<null>" : this.streamName));
    sb.append(',');
    sb.append("streamNamespace");
    sb.append('=');
    sb.append(((this.streamNamespace == null) ? "<null>" : this.streamNamespace));
    sb.append(',');
    sb.append("connectionIds");
    sb.append('=');
    sb.append(((this.connectionIds == null) ? "<null>" : this.connectionIds));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(((this.additionalProperties == null) ? "<null>" : this.additionalProperties));
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.connectionIds == null) ? 0 : this.connectionIds.hashCode()));
    result = ((result * 31) + ((this.prefix == null) ? 0 : this.prefix.hashCode()));
    result = ((result * 31) + ((this.namespaceFormat == null) ? 0 : this.namespaceFormat.hashCode()));
    result = ((result * 31) + ((this.streamNamespace == null) ? 0 : this.streamNamespace.hashCode()));
    result = ((result * 31) + ((this.additionalProperties == null) ? 0 : this.additionalProperties.hashCode()));
    result = ((result * 31) + ((this.namespaceDefinition == null) ? 0 : this.namespaceDefinition.hashCode()));
    result = ((result * 31) + ((this.streamName == null) ? 0 : this.streamName.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if ((other instanceof StreamDescriptorForDestination) == false) {
      return false;
    }
    StreamDescriptorForDestination rhs = ((StreamDescriptorForDestination) other);
    return ((((((((this.connectionIds == rhs.connectionIds) || ((this.connectionIds != null) && this.connectionIds.equals(rhs.connectionIds)))
        && ((this.prefix == rhs.prefix) || ((this.prefix != null) && this.prefix.equals(rhs.prefix))))
        && ((this.namespaceFormat == rhs.namespaceFormat) || ((this.namespaceFormat != null) && this.namespaceFormat.equals(rhs.namespaceFormat))))
        && ((this.streamNamespace == rhs.streamNamespace) || ((this.streamNamespace != null) && this.streamNamespace.equals(rhs.streamNamespace))))
        && ((this.additionalProperties == rhs.additionalProperties)
            || ((this.additionalProperties != null) && this.additionalProperties.equals(rhs.additionalProperties))))
        && ((this.namespaceDefinition == rhs.namespaceDefinition)
            || ((this.namespaceDefinition != null) && this.namespaceDefinition.equals(rhs.namespaceDefinition))))
        && ((this.streamName == rhs.streamName) || ((this.streamName != null) && this.streamName.equals(rhs.streamName))));
  }

}
