/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.persistence.job.models;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.airbyte.commons.version.Version;
import io.airbyte.config.AllowedHosts;
import io.airbyte.config.WorkloadPriority;
import jakarta.annotation.Generated;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.UUID;

/**
 * IntegrationLauncherConfig
 * <p>
 * integration launcher config
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "jobId",
  "attemptId",
  "connectionId",
  "workspaceId",
  "dockerImage",
  "protocolVersion",
  "isCustomConnector",
  "allowedHosts",
  "additionalEnvironmentVariables",
  "additionalLabels",
  "priority"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class IntegrationLauncherConfig {

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("jobId")
  private String jobId;
  /**
   *
   * (Required)
   *
   */
  @JsonProperty("attemptId")
  private Long attemptId;
  @JsonProperty("connectionId")
  private UUID connectionId;
  @JsonProperty("workspaceId")
  private UUID workspaceId;
  /**
   *
   * (Required)
   *
   */
  @JsonProperty("dockerImage")
  private String dockerImage;
  @JsonProperty("protocolVersion")
  private Version protocolVersion;
  @JsonProperty("isCustomConnector")
  private Boolean isCustomConnector;
  @JsonProperty("allowedHosts")
  private AllowedHosts allowedHosts;
  @JsonProperty("additionalEnvironmentVariables")
  private Map<String, String> additionalEnvironmentVariables;
  @JsonProperty("additionalLabels")
  private Map<String, String> additionalLabels;
  @JsonProperty("priority")
  private WorkloadPriority priority;
  @JsonIgnore
  private final Map<String, Object> additionalProperties = new HashMap<>();

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("jobId")
  public String getJobId() {
    return jobId;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("jobId")
  public void setJobId(String jobId) {
    this.jobId = jobId;
  }

  public IntegrationLauncherConfig withJobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("attemptId")
  public Long getAttemptId() {
    return attemptId;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("attemptId")
  public void setAttemptId(Long attemptId) {
    this.attemptId = attemptId;
  }

  public IntegrationLauncherConfig withAttemptId(Long attemptId) {
    this.attemptId = attemptId;
    return this;
  }

  @JsonProperty("connectionId")
  public UUID getConnectionId() {
    return connectionId;
  }

  @JsonProperty("connectionId")
  public void setConnectionId(UUID connectionId) {
    this.connectionId = connectionId;
  }

  public IntegrationLauncherConfig withConnectionId(UUID connectionId) {
    this.connectionId = connectionId;
    return this;
  }

  @JsonProperty("workspaceId")
  public UUID getWorkspaceId() {
    return workspaceId;
  }

  @JsonProperty("workspaceId")
  public void setWorkspaceId(UUID workspaceId) {
    this.workspaceId = workspaceId;
  }

  public IntegrationLauncherConfig withWorkspaceId(UUID workspaceId) {
    this.workspaceId = workspaceId;
    return this;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("dockerImage")
  public String getDockerImage() {
    return dockerImage;
  }

  /**
   *
   * (Required)
   *
   */
  @JsonProperty("dockerImage")
  public void setDockerImage(String dockerImage) {
    this.dockerImage = dockerImage;
  }

  public IntegrationLauncherConfig withDockerImage(String dockerImage) {
    this.dockerImage = dockerImage;
    return this;
  }

  @JsonProperty("protocolVersion")
  public Version getProtocolVersion() {
    return protocolVersion;
  }

  @JsonProperty("protocolVersion")
  public void setProtocolVersion(Version protocolVersion) {
    this.protocolVersion = protocolVersion;
  }

  public IntegrationLauncherConfig withProtocolVersion(Version protocolVersion) {
    this.protocolVersion = protocolVersion;
    return this;
  }

  @JsonProperty("isCustomConnector")
  public Boolean getIsCustomConnector() {
    return isCustomConnector;
  }

  @JsonProperty("isCustomConnector")
  public void setIsCustomConnector(Boolean isCustomConnector) {
    this.isCustomConnector = isCustomConnector;
  }

  public IntegrationLauncherConfig withIsCustomConnector(Boolean isCustomConnector) {
    this.isCustomConnector = isCustomConnector;
    return this;
  }

  @JsonProperty("allowedHosts")
  public AllowedHosts getAllowedHosts() {
    return allowedHosts;
  }

  @JsonProperty("allowedHosts")
  public void setAllowedHosts(AllowedHosts allowedHosts) {
    this.allowedHosts = allowedHosts;
  }

  public IntegrationLauncherConfig withAllowedHosts(AllowedHosts allowedHosts) {
    this.allowedHosts = allowedHosts;
    return this;
  }

  @JsonProperty("additionalEnvironmentVariables")
  public Map<String, String> getAdditionalEnvironmentVariables() {
    return additionalEnvironmentVariables;
  }

  @JsonProperty("additionalEnvironmentVariables")
  public void setAdditionalEnvironmentVariables(Map<String, String> additionalEnvironmentVariables) {
    this.additionalEnvironmentVariables = additionalEnvironmentVariables;
  }

  public IntegrationLauncherConfig withAdditionalEnvironmentVariables(Map<String, String> additionalEnvironmentVariables) {
    this.additionalEnvironmentVariables = additionalEnvironmentVariables;
    return this;
  }

  @JsonProperty("additionalLabels")
  public Map<String, String> getAdditionalLabels() {
    return additionalLabels;
  }

  @JsonProperty("additionalLabels")
  public void setAdditionalLabels(Map<String, String> additionalLabels) {
    this.additionalLabels = additionalLabels;
  }

  public IntegrationLauncherConfig withAdditionalLabels(Map<String, String> additionalLabels) {
    this.additionalLabels = additionalLabels;
    return this;
  }

  @JsonProperty("priority")
  public WorkloadPriority getPriority() {
    return priority;
  }

  @JsonProperty("priority")
  public void setPriority(WorkloadPriority priority) {
    this.priority = priority;
  }

  public IntegrationLauncherConfig withPriority(WorkloadPriority priority) {
    this.priority = priority;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public IntegrationLauncherConfig withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(IntegrationLauncherConfig.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("jobId");
    sb.append('=');
    sb.append(((this.jobId == null) ? "<null>" : this.jobId));
    sb.append(',');
    sb.append("attemptId");
    sb.append('=');
    sb.append(((this.attemptId == null) ? "<null>" : this.attemptId));
    sb.append(',');
    sb.append("connectionId");
    sb.append('=');
    sb.append(((this.connectionId == null) ? "<null>" : this.connectionId));
    sb.append(',');
    sb.append("workspaceId");
    sb.append('=');
    sb.append(((this.workspaceId == null) ? "<null>" : this.workspaceId));
    sb.append(',');
    sb.append("dockerImage");
    sb.append('=');
    sb.append(((this.dockerImage == null) ? "<null>" : this.dockerImage));
    sb.append(',');
    sb.append("protocolVersion");
    sb.append('=');
    sb.append(((this.protocolVersion == null) ? "<null>" : this.protocolVersion));
    sb.append(',');
    sb.append("isCustomConnector");
    sb.append('=');
    sb.append(((this.isCustomConnector == null) ? "<null>" : this.isCustomConnector));
    sb.append(',');
    sb.append("allowedHosts");
    sb.append('=');
    sb.append(((this.allowedHosts == null) ? "<null>" : this.allowedHosts));
    sb.append(',');
    sb.append("additionalEnvironmentVariables");
    sb.append('=');
    sb.append(((this.additionalEnvironmentVariables == null) ? "<null>" : this.additionalEnvironmentVariables));
    sb.append(',');
    sb.append("additionalLabels");
    sb.append('=');
    sb.append(((this.additionalLabels == null) ? "<null>" : this.additionalLabels));
    sb.append(',');
    sb.append("priority");
    sb.append('=');
    sb.append(((this.priority == null) ? "<null>" : this.priority));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(this.additionalProperties);
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.isCustomConnector == null) ? 0 : this.isCustomConnector.hashCode()));
    result = ((result * 31) + ((this.allowedHosts == null) ? 0 : this.allowedHosts.hashCode()));
    result = ((result * 31) + ((this.jobId == null) ? 0 : this.jobId.hashCode()));
    result = ((result * 31) + ((this.additionalEnvironmentVariables == null) ? 0 : this.additionalEnvironmentVariables.hashCode()));
    result = ((result * 31) + ((this.dockerImage == null) ? 0 : this.dockerImage.hashCode()));
    result = ((result * 31) + ((this.connectionId == null) ? 0 : this.connectionId.hashCode()));
    result = ((result * 31) + ((this.additionalLabels == null) ? 0 : this.additionalLabels.hashCode()));
    result = ((result * 31) + ((this.protocolVersion == null) ? 0 : this.protocolVersion.hashCode()));
    result = result * 31 + this.additionalProperties.hashCode();
    result = ((result * 31) + ((this.priority == null) ? 0 : this.priority.hashCode()));
    result = ((result * 31) + ((this.attemptId == null) ? 0 : this.attemptId.hashCode()));
    result = ((result * 31) + ((this.workspaceId == null) ? 0 : this.workspaceId.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if (!(other instanceof IntegrationLauncherConfig rhs)) {
      return false;
    }
    return (Objects.equals(this.isCustomConnector, rhs.isCustomConnector)) && (Objects.equals(this.allowedHosts, rhs.allowedHosts))
        && Objects.equals(this.jobId, rhs.jobId) && (Objects.equals(this.additionalEnvironmentVariables, rhs.additionalEnvironmentVariables))
        && Objects.equals(this.dockerImage, rhs.dockerImage) && (Objects.equals(this.connectionId, rhs.connectionId))
        && (Objects.equals(this.additionalLabels, rhs.additionalLabels)) && (Objects.equals(this.protocolVersion, rhs.protocolVersion))
        && (this.additionalProperties == rhs.additionalProperties || this.additionalProperties.equals(rhs.additionalProperties))
        && (Objects.equals(this.priority, rhs.priority)) && Objects.equals(this.attemptId, rhs.attemptId)
        && (Objects.equals(this.workspaceId, rhs.workspaceId));
  }

}
