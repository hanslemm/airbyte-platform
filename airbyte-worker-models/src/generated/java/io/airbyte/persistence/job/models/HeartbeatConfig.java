/*
 * Copyright (c) 2020-2025 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.persistence.job.models;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.annotation.Generated;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * HeartbeatConfig
 * <p>
 * inputs necessary for the configuration of heartbeat monitors during replication
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
  "maxSecondsBetweenMessages"
})
@Generated(value = "Generated by jsonSchema2Pojo")
public class HeartbeatConfig {

  /**
   * Max time in seconds between messages that needs to elapse before the heartbeat monitor considers
   * there to be a violation (Required)
   *
   */
  @JsonProperty("maxSecondsBetweenMessages")
  @JsonPropertyDescription("Max time in seconds between messages that needs to elapse before the heartbeat monitor considers there to be a violation")
  private Long maxSecondsBetweenMessages;
  @JsonIgnore
  private final Map<String, Object> additionalProperties = new HashMap<>();

  /**
   * Max time in seconds between messages that needs to elapse before the heartbeat monitor considers
   * there to be a violation (Required)
   *
   */
  @JsonProperty("maxSecondsBetweenMessages")
  public Long getMaxSecondsBetweenMessages() {
    return maxSecondsBetweenMessages;
  }

  /**
   * Max time in seconds between messages that needs to elapse before the heartbeat monitor considers
   * there to be a violation (Required)
   *
   */
  @JsonProperty("maxSecondsBetweenMessages")
  public void setMaxSecondsBetweenMessages(Long maxSecondsBetweenMessages) {
    this.maxSecondsBetweenMessages = maxSecondsBetweenMessages;
  }

  public HeartbeatConfig withMaxSecondsBetweenMessages(Long maxSecondsBetweenMessages) {
    this.maxSecondsBetweenMessages = maxSecondsBetweenMessages;
    return this;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  @JsonAnySetter
  public void setAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
  }

  public HeartbeatConfig withAdditionalProperty(String name, Object value) {
    this.additionalProperties.put(name, value);
    return this;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(HeartbeatConfig.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
    sb.append("maxSecondsBetweenMessages");
    sb.append('=');
    sb.append(((this.maxSecondsBetweenMessages == null) ? "<null>" : this.maxSecondsBetweenMessages));
    sb.append(',');
    sb.append("additionalProperties");
    sb.append('=');
    sb.append(this.additionalProperties);
    sb.append(',');
    if (sb.charAt((sb.length() - 1)) == ',') {
      sb.setCharAt((sb.length() - 1), ']');
    } else {
      sb.append(']');
    }
    return sb.toString();
  }

  @Override
  public int hashCode() {
    int result = 1;
    result = ((result * 31) + ((this.maxSecondsBetweenMessages == null) ? 0 : this.maxSecondsBetweenMessages.hashCode()));
    result = result * 31 + this.additionalProperties.hashCode();
    return result;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if (!(other instanceof HeartbeatConfig rhs)) {
      return false;
    }
    return ((Objects.equals(this.maxSecondsBetweenMessages, rhs.maxSecondsBetweenMessages))
        && (Objects.equals(this.additionalProperties, rhs.additionalProperties)));
  }

}
